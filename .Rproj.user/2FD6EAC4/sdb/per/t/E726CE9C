{
    "contents" : "##########\n##########\n# 20150723\n# Input - Output\n##########\n##########\n\n# call packages\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(gridExtra)\nlibrary(knitr)\n##########\n\n##########\n# data preparation\n##########\n# load data\n# !!! to be replaced by: csv -> data.frame  \n# load(\"VIP2.RData\")\n\n# get history for: CC,FF,NP,PC\n# from 2015-1-1 to 2015-5-28\ntrx <- tbl_df(VIP2 %>% \n  filter(ID %in% c(\"CC\", \"FF\", \"NP\", \"PC\")) %>%\n  filter(Date > as.Date(\"2014-12-31\") & Date < as.Date(\"2015-5-29\")))\n# remove Lng & Lat\ntrx <- trx[, -c(9:13)]\n\n# construct train & test set\ntrain <- trx %>% filter(Date < as.Date(\"2015-5-1\"))\ntest <- trx %>% filter(Date >= as.Date(\"2015-5-1\"))\n\n# get the ID list\nID.list <- trx %>% group_by(ID) %>% summarise()\n\n##########\n##########\n# model0: ID_OD\n##########\nmatin <- train %>%\n  select(ID, Entr, Sor, Date, DOW, TimeSor) %>%\n  filter(TimeSor < 12 ) %>%\n  group_by(ID, Entr, Sor, DOW) %>%\n  summarise(nDOW = n())\n\naprem <- train %>%\n  select(ID, Entr, Sor, Date, DOW, TimeSor) %>%\n  filter(TimeSor >= 12 ) %>%\n  group_by(ID, Entr, Sor, DOW) %>%\n  summarise(nDOW = n())\n\nT.matin <- train %>%\n  select(ID, Entr, Sor, Date, DOW, TimeSor) %>%\n  filter(TimeSor < 12 ) %>%\n  group_by(ID, Entr, Sor, DOW) %>%\n  summarise(SD = sd(TimeSor), T = mean(TimeSor),Tmin = T -SD, Tmax = T + SD)\n\nT.aprem <- train %>%\n  select(ID, Entr, Sor, Date, DOW, TimeSor) %>%\n  filter(TimeSor >= 12 ) %>%\n  group_by(ID, Entr, Sor, DOW) %>%\n  summarise(SD = sd(TimeSor), T = mean(TimeSor),Tmin = T -SD, Tmax = T + SD)\n\nT.matin <- inner_join(T.matin, matin)\nT.aprem <- inner_join(T.aprem, aprem)\nT <- rbind(T.matin, T.aprem)\n\n# ??? parameter: 5\nT <- T %>% filter(nDOW > 5)\nresult.model0 <- T[, c(1:4, 7:8)]\nresult.model0$Model<-0\n##########\n# evalutaion model0\n##########\ntest0 <- test\n\ntest0$result <- 0\nfor (i in 1:nrow(result.model0)){\n  test0[\n    test0$ID   == result.model0$ID[i] &\n      test0$Entr == result.model0$Entr[i]&\n      test0$Sor  == result.model0$Sor[i]&\n      test0$DOW  == result.model0$DOW[i]&\n      test0$TimeSor >= result.model0$Tmin[i]&\n      test0$TimeSor <= result.model0$Tmax[i],\n    \"result\"]<-1\n}\n\n# get indicators\ntest.result.model0 <- test0 %>%\n  group_by(ID) %>%\n  summarise(Tpos = sum(result[result == 1]), Fneg = n() - Tpos, Ind1 = Tpos/(Tpos+Fneg), Ind2 = Fneg/(Tpos+Fneg) )\n\n# get the final indicator\ntest.result.model0$Ind <- test.result.model0$Ind1 - test.result.model0$Ind2 / 15\ntest.result.model0 <- test.result.model0[, c(1, ncol(test.result.model0))]\ntest.result.model0$Model <- 0\n##########\n##########\n# model1: Time - Space\n##########\n# call the function to get the troncons\ntrain_decompose <- decompose(train)  \n\n# clustering TimeSor\nresult <- data.frame(ID=\"\", Entr=0, Sor=0, DOW=0, SD=0, T=0, Tmin=0, Tmax=0, n=0)\nfor (i in 1:nrow(ID.list)){\n  for (j in 0:6){\n    temp <- train_decompose %>% filter(ID == ID.list$ID[i] & DOW == j)\n    \n    # base to be verified\n    if(nrow(temp) >= 10) {\n      # if not many passages, we will not cluster\n      # decide nb of cluster\n      n.cluster <- 3\n      set.seed(1234)\n      temp.kmeans <-   kmeans(temp[, \"TimeSor\"], centers = n.cluster)\n      temp$cluster <- temp.kmeans$cluster\n      T <- temp %>%\n        group_by(ID, Entr, Sor, DOW, cluster) %>%\n        summarise(SD = sd(TimeSor), T = mean(TimeSor),Tmin = T -SD, Tmax = T + SD, n = n())\n      T <- T %>% filter(n>1)\n      T$cluster <- NULL\n      result <- rbind(result, T)\n      }\n    }\n}\nresult <- result[-1,]\n# ??? parameter: 5\nresult <- result %>% filter(n > 5)\nresult.model1 <- result[,-c(5:6,9)]\nresult.model1$Model <- 1\n##########\n# evalutaion model1\n##########\ntest_decompose <- decompose(test)\n\ntest_decompose$result <- 0\nfor (i in 1:nrow(result)){\n  test_decompose[\n    test_decompose$ID   == result$ID[i] &\n    test_decompose$Entr == result$Entr[i]&\n    test_decompose$Sor  == result$Sor[i]&\n    test_decompose$DOW  == result$DOW[i]&\n    test_decompose$TimeSor >= result$Tmin[i]&\n    test_decompose$TimeSor <= result$Tmax[i],\n    \"result\"]<-1\n}\n\n# get indicators\ntest_result <- test_decompose %>%\n  group_by(ID) %>%\n  summarise(Tpos = sum(result[result == 1]), Fneg = n() - Tpos, Ind1 = Tpos/(Tpos+Fneg), Ind2 = Fneg/(Tpos+Fneg) )\n\n# get the final indicator\ntest_result$Ind <- test_result$Ind1 - test_result$Ind2 / 15\ntest.result.model1 <- test_result[, c(1, ncol(test_result))]\ntest.result.model1$Model <- 1\n\n\n\n\n\n\n##########\n# compare model results\n##########\nInd <- rbind(test.result.model0, test.result.model1)\nInd <- result %>% group_by(ID) %>% summarise(Model = sum(Model[Ind == max(Ind)]))\n\nresult <- rbind(result.model0, result.model1)\nresult <- inner_join(result, Ind)\nresult$Model <- NULL\nwrite.table(result, file=\"result.csv\", sep = \";\", row.names = F, quote = F)\n",
    "created" : 1437641743731.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "510172855",
    "id" : "E726CE9C",
    "lastKnownWriteTime" : 1437755729,
    "path" : "~/RStudio_Default_Working_Directory/TS/VA1/SA_end2end.R",
    "project_path" : "SA_end2end.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}