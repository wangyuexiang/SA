{
    "contents" : "##########\n##########\n# 20150723\n##########\n##########\n### List of all functions\n# GetLngLat:\tget the longitude and lattitude of the transaction\n# GetResult:\tapply model result to test set\n# GetInd:\t\tget indicators for each model\n# Docompose: \ttransform OD -> Troncon\n\n##########\n\nGetLngLat <- function(transaction) {\n\t# Add longitude and lattitude to the transaction\n\t# Args:\n\t#\ttransaction:\tEntr, Sor, ...\n\t# Returns:\n\t#\ttransaction:\tEntr, Sor, ..., ELng, ELat, SLng, SLat\n  transaction$Entr <- as.numeric(transaction$Entr)\n  transaction$Sor <- as.numeric(transaction$Sor)\n\tcde <- gares[, c(\"Cde\", \"Lng\", \"Lat\")]\n\tnames(cde) <- c(\"Entr\", \"ELng\", \"ELat\")\n\ttransaction <- left_join(transaction, cde, by = \"Entr\")\n\tnames(cde) <- c(\"Sor\", \"SLng\", \"SLat\")\n\ttransaction <- left_join(transaction, cde, by = \"Sor\")\n\treturn(transaction)\t\n}\n\n\nGetResult <- function(test, result,\n\t\t\t\t\t  DOW = TRUE ) {\n\t# Identify the passage in the test set that the model could predict\n\t#\n\t# Args:\n\t#\ttest: set of passages\n\t#\tresult: result of Model in format: ID Entr Sor (DOW) Tmin Tmax\n\t#\tDOW: if the model considers DOW\n\ttest$result <- 0\n\tif (DOW == TRUE) {\n\t\tfor (i in 1:nrow(result)){\n\t\t  test[\n\t\t\ttest$ID   == result$ID[i] &\n\t\t    test$Entr == result$Entr[i]&\n\t\t    test$Sor  == result$Sor[i]&\n\t\t    test$DOW  == result$DOW[i]&\n\t\t    test$TimeSor >= result$Tmin[i]&\n\t\t    test$TimeSor <= result$Tmax[i],\n\t\t    \"result\"]<-1\n\t\t}\n\t\t# DOW == TRUE \t\t\n\t} else {\n\t\tfor (i in 1:nrow(result)){\n\t\t  test[\n\t\t\ttest$ID   == result$ID[i] &\n\t\t    test$Entr == result$Entr[i]&\n\t\t    test$Sor  == result$Sor[i]&\n\t\t    test$TimeSor >= result$Tmin[i]&\n\t\t    test$TimeSor <= result$Tmax[i],\n\t\t    \"result\"]<-1\n\t\t}\n\t\t# DOW == FALSE\n\t}\t\n\treturn(test)\n}\n\n\nGetInd <- function(test, result,\n\t\t\t\t   DOW = TRUE) {\n\t# Get 3 indicators and combine them to evaluate each model\n\t#\n\t# Args:\n\t#\ttest: set of passages\n\t#\tresult: result of Model in format: ID, Entr, Sor, (DOW,) Tmin, Tmax\n\t#\tDOW: if the model considers DOW\n\tInd <-  test %>%\n\t\t\tgroup_by(ID) %>%\n\t\t\tsummarise(Tpos = sum(result[result == 1]), Fneg = n() - Tpos, Ind1 = Tpos/(Tpos+Fneg), Ind2 = Fneg/(Tpos+Fneg) )\n\t\t\t# Ind1: Sensitivity, Recall\n\t\t\t# Ind2: Miss rate\n\t\t\t\n\tresult <- inner_join(test.period, result, by=\"DOW\")\n\tresult$Mark <- 0\n\n\t# result$DOW <- as.character(result$DOW)\n\tfor(i in 1:nrow(test)){\n\t  result[\n\t    result$ID   == test$ID[i] &\n\t      result$Entr == test$Entr[i] &\n\t      result$Sor  == test$Sor[i] &\n\t      result$Date  == test$Date[i] &\n\t      result$Tmin <= test$TimeSor[i]&\n\t      result$Tmax >= test$TimeSor[i],\n\t    \"Mark\"]<-1\n\t}\n\t\n\tInd3 <- result %>% group_by(ID) %>% summarise(nMark = sum(Mark[Mark==1]), t = (n() - nMark), Ind3 = t/ n() )\n\t# Ind3: fake alert\n\t\n\tInd <- inner_join(Ind,Ind3)\n\tInd <- Ind[, c(\"ID\", \"Ind1\", \"Ind2\", \"Ind3\")]\n\t# !!! to be justified or modified\n\tInd$Ind <- Ind$Ind1 - Ind$Ind2 - Ind$Ind3 / 5\n\treturn(Ind)\n}\n\n\n\nBeforeDecompose <- function(Transaction) {\n\tTransaction$KMS <- 0\n\treturn(Transaction)\n}\n\nAfterDecompose <- function(Transaction) {\n\tTransaction <- Transaction[, c(\"ID\", \"Entr\", \"Sor\", \"Date\", \"DOW\", \"WOY\", \"TimeEntr\", \"TimeSor\")]\n\tTransaction$DOW <- as.numeric(Transaction$DOW)\n\tTransaction$WOY <- as.numeric(Transaction$WOY)\n\tTransaction$TimeEntr <- as.numeric(Transaction$TimeEntr)\n\tTransaction$TimeSor <- as.numeric(Transaction$TimeSor)\n\tTransaction <- tbl_df(Transaction)\n\treturn(Transaction)\n}\n\n# Args:\n#\t\tTransactions: ID, Entr, Sor, Date, DOW, WOY, TimeEntr, TimeSor, KMS\n# Returns:\n# \t  ID, ID_Troncon, Autoroute, Entr, Sor, KMS, Date, TimeEntr, TimeSor, DOW, WOY, Sens\nDecompose <- function ( Transactions ) {\n\t#DECOMPOSER LES TRAJETS PAR AUTOROUTE UNIQUE\n\t#Et traiter le système ouvert\n\tgares$Autoroute <- as.character(gares$Autoroute)\n\tTransactions$Entr <- as.numeric(as.character(Transactions$Entr))\n\tTransactions$Sor <- as.numeric(as.character(Transactions$Sor))\n\tAutoroute <- vector(mode = \"character\", length = nrow(Transactions))\n\tTransactions_decompose <- cbind(Transactions, Autoroute)\n\tTransactions_decompose$Autoroute <- as.character(Transactions_decompose$Autoroute)\n\tTransactions_restant <- Transactions\n\tPointeur <- 1\n\tPointeur_restant <- 1\n\tGare_inconnue <- 0 #Gares du système ouvert que le code ne connait pas\n\tfor (i in 1 : nrow(Transactions)){\n\t  if (  ( (Transactions$Entr[i] %in% Troncons_A789[,4]) | (Transactions$Entr[i] %in% Troncons_A789[,6])  ) & \n\t        ( (Transactions$Sor[i] %in% Troncons_A789[,4]) | (Transactions$Sor[i] %in% Troncons_A789[,6])  )  ) {  # SI TRAJET DANS LES TROIS AUTOROUTES\n\t    if (gares$Autoroute[match(Transactions$Entr[i],gares$Cde)] !=  gares$Autoroute[match(Transactions$Sor[i],gares$Cde)] ) { #E=A7etS=A9 ou l'inverse\n\t      if (Transactions$Entr[i] != 25004210 & Transactions$Sor[i] != 25004210){  # Entrée et sortie <> Orange Centre\n\t        if(gares$Autoroute[match(Transactions$Entr[i],gares$Cde)] == \"A7\"){# E=A7 S=A9\n\t          newrow1 <- c(Transactions[i,1],Transactions$Entr[i],25004210,Transactions$KMS[i],Transactions$Year[i],Transactions$Month[i],Transactions$Day[i],Transactions$Hour[i],Transactions$Minute[i],Transactions$TimeEntr[i],Transactions$TimeSor[i],Transactions$DOW[i],Transactions$WOY[i],Transactions$Voie[i],\"A7\")\n\t          newrow2 <- c(Transactions[i,1],25004210,Transactions$Sor[i],Transactions$KMS[i],Transactions$Year[i],Transactions$Month[i],Transactions$Day[i],Transactions$Hour[i],Transactions$Minute[i],Transactions$TimeEntr[i],Transactions$TimeSor[i],Transactions$DOW[i],Transactions$WOY[i],Transactions$Voie[i],\"A9\")\n\t          Transactions_decompose = rbind(Transactions_decompose[1:Pointeur,],newrow1,newrow2,Transactions_decompose[-(1:Pointeur),])\n\t          Pointeur <- Pointeur +2\n\t        }\n\t        else if(gares$Autoroute[match(Transactions$Entr[i],gares$Cde)] == \"A9\"){# E=A9 S=A7\n\t          newrow1 <- c(Transactions[i,1],Transactions$Entr[i],25004210,Transactions$KMS[i],Transactions$Year[i],Transactions$Month[i],Transactions$Day[i],Transactions$Hour[i],Transactions$Minute[i],Transactions$TimeEntr[i],Transactions$TimeSor[i],Transactions$DOW[i],Transactions$WOY[i],Transactions$Voie[i],\"A9\")\n\t          newrow2 <- c(Transactions[i,1],25004210,Transactions$Sor[i],Transactions$KMS[i],Transactions$Year[i],Transactions$Month[i],Transactions$Day[i],Transactions$Hour[i],Transactions$Minute[i],Transactions$TimeEntr[i],Transactions$TimeSor[i],Transactions$DOW[i],Transactions$WOY[i],Transactions$Voie[i],\"A7\")\n\t          Transactions_decompose = rbind(Transactions_decompose[1:Pointeur,],newrow1,newrow2,Transactions_decompose[-(1:Pointeur),])\n\t          Pointeur <- Pointeur +2\n\t        }\n\t      }\n\t      else { # E=A9 S=OC ou l'inverse\n\t        Transactions_decompose$Autoroute[Pointeur] <- \"A9\"\n\t      }\n\t    }\n\t    else {\n\t      Transactions_decompose$Autoroute[Pointeur] <- gares$Autoroute[match(Transactions$Entr[i],gares$Cde)]\n\t    }\n\t    if (Pointeur_restant == 1){\n\t      Transactions_restant <- Transactions_restant[2:nrow(Transactions_restant),]\n\t    }\n\t    else {\n\t      Transactions_restant <- rbind(Transactions_restant[(1:(Pointeur_restant-1)),],Transactions_restant[-(1:(Pointeur_restant)),])\n\t      Pointeur_restant <- Pointeur_restant - 1\n\t    }\n\t  }\n\t  Pointeur <- Pointeur +1\n\t  Pointeur_restant <- Pointeur_restant +1\n\t}\n\n\n\tTransactions_decompose <- Transactions_decompose[Transactions_decompose$Autoroute > 0,]\n\n\n\n\n\n\n\t#DECOMPOSER LES OD PAR TRONCONS :\n\tTransactions_par_troncons <- data.frame(ID = \"\", ID_Troncon= 0, Autoroute= \"\", Entr= 0, Sor=0, KMS=0, Date = 0, TimeEntr = 0, TimeSor =0, DOW=0, WOY=0, Sens = 0)\n\tTransactions_par_troncons$Autoroute <- as.character(Transactions_par_troncons$Autoroute)\n\tTransactions_par_troncons$ID <- as.character(Transactions_par_troncons$ID)\n\tTransactions_decompose$Date <- as.character(Transactions_decompose$Date)\n\tTransactions_par_troncons$Date <- as.character(Transactions_par_troncons$Date)\n\n\tfor (i in 1:nrow(Transactions_decompose)){\n\t  if ( Transactions_decompose$Autoroute[i] == \"A7\"){\n\t    entree <- match(Transactions_decompose$Entr[i],A7_par_pk$Cde)\n\t    sortie <- match(Transactions_decompose$Sor[i],A7_par_pk$Cde)\n\t    if ( entree < sortie ) { # SENS 1\n\t      for ( j in entree : (sortie-1) ){\n\t        Transactions_par_troncons <- rbind(Transactions_par_troncons,c(Transactions_decompose$ID[i],Troncons_A7$ID_Troncon[j],\"A7\",A7_par_pk$Cde[j],A7_par_pk$Cde[j+1],Transactions_decompose$KMS[i],Transactions_decompose$Date[i],Transactions_decompose$TimeEntr[i],Transactions_decompose$TimeSor[i],Transactions_decompose$DOW[i],Transactions_decompose$WOY[i],1))\n\t      }\n\t    }\n\t    else{ #SENS 2\n\t      for ( j in entree : (sortie+1) ){\n\t        Transactions_par_troncons <- rbind(Transactions_par_troncons,c(Transactions_decompose$ID[i],Troncons_A7$ID_Troncon[j-1],\"A7\",A7_par_pk$Cde[j],A7_par_pk$Cde[j-1],Transactions_decompose$KMS[i],Transactions_decompose$Date[i],Transactions_decompose$TimeEntr[i],Transactions_decompose$TimeSor[i],Transactions_decompose$DOW[i],Transactions_decompose$WOY[i],2))\n\t      }\n\t    }\n\t  }\n\t  else if ( Transactions_decompose$Autoroute[i] == \"A8\"){\n\t    entree <- match(Transactions_decompose$Entr[i],A8_par_pk$Cde)\n\t    sortie <- match(Transactions_decompose$Sor[i],A8_par_pk$Cde)\n\t    if ( entree < sortie ) { # SENS 1\n\t      for ( j in entree : (sortie-1) ){\n\t        Transactions_par_troncons <- rbind(Transactions_par_troncons,c(Transactions_decompose$ID[i],Troncons_A8$ID_Troncon[j],\"A8\",A8_par_pk$Cde[j],A8_par_pk$Cde[j+1],Transactions_decompose$KMS[i],Transactions_decompose$Date[i],Transactions_decompose$TimeEntr[i],Transactions_decompose$TimeSor[i],Transactions_decompose$DOW[i],Transactions_decompose$WOY[i],1))\n\t      }\n\t    }\n\t    else{ #SENS 2\n\t      for ( j in entree : (sortie+1) ){\n\t        Transactions_par_troncons <- rbind(Transactions_par_troncons,c(Transactions_decompose$ID[i],Troncons_A8$ID_Troncon[j-1],\"A8\",A8_par_pk$Cde[j],A8_par_pk$Cde[j-1],Transactions_decompose$KMS[i],Transactions_decompose$Date[i],Transactions_decompose$TimeEntr[i],Transactions_decompose$TimeSor[i],Transactions_decompose$DOW[i],Transactions_decompose$WOY[i],2))\n\t      }\n\t    }\n\t  }\n\t  else if ( Transactions_decompose$Autoroute[i] == \"A9\"){\n\t    entree <- match(Transactions_decompose$Entr[i],A9_par_pk$Cde)\n\t    sortie <- match(Transactions_decompose$Sor[i],A9_par_pk$Cde)\n\t    if ( entree < sortie ) { # SENS 1\n\t      for ( j in entree : (sortie-1) ){\n\t        Transactions_par_troncons <- rbind(Transactions_par_troncons,c(Transactions_decompose$ID[i],Troncons_A9$ID_Troncon[j],\"A9\",A9_par_pk$Cde[j],A9_par_pk$Cde[j+1],Transactions_decompose$KMS[i],Transactions_decompose$Date[i],Transactions_decompose$TimeEntr[i],Transactions_decompose$TimeSor[i],Transactions_decompose$DOW[i],Transactions_decompose$WOY[i],1))\n\t      }\n\t    }\n\t    else{ #SENS 2\n\t      for ( j in entree : (sortie+1) ){\n\t        Transactions_par_troncons <- rbind(Transactions_par_troncons,c(Transactions_decompose$ID[i],Troncons_A9$ID_Troncon[j-1],\"A9\",A9_par_pk$Cde[j],A9_par_pk$Cde[j-1],Transactions_decompose$KMS[i],Transactions_decompose$Date[i],Transactions_decompose$TimeEntr[i],Transactions_decompose$TimeSor[i],Transactions_decompose$DOW[i],Transactions_decompose$WOY[i],2))\n\t      }\n\t    }\n\t  }\n\t}\n\tTransactions_par_troncons <- Transactions_par_troncons[-1,]\n\n\n\t#Rajouter demi trajet LANCON LA BARQUE\n\tPointeur <- 1\n\tfor (i in 1:nrow(Transactions_par_troncons)){\n\t  if (Transactions_par_troncons$ID_Troncon[Pointeur] == 20 & Transactions_par_troncons$Sens[Pointeur] == 1){ # (A7 -> Lancon)\n\t    newrow1 <- c(Transactions_par_troncons$ID[Pointeur],21,\"A7\",25004220,25004278,Transactions_par_troncons$KMS[Pointeur],Transactions_par_troncons$Date[Pointeur],Transactions_par_troncons$TimeEntr[Pointeur],Transactions_par_troncons$TimeSor[Pointeur],Transactions_par_troncons$DOW[Pointeur],Transactions_par_troncons$WOY[Pointeur],1)\n\t    newrow2 <- c(Transactions_par_troncons$ID[Pointeur],22,\"A7\",25004278,25004279,Transactions_par_troncons$KMS[Pointeur],Transactions_par_troncons$Date[Pointeur],Transactions_par_troncons$TimeEntr[Pointeur],Transactions_par_troncons$TimeSor[Pointeur],Transactions_par_troncons$DOW[Pointeur],Transactions_par_troncons$WOY[Pointeur],1)\n\t    Transactions_par_troncons <- rbind(Transactions_par_troncons[(1:Pointeur),],newrow1,newrow2,Transactions_par_troncons[-(1:Pointeur),])\n\t    Pointeur <- Pointeur + 2\n\t  } \n\t  if (Transactions_par_troncons$ID_Troncon[Pointeur] == 20 & Transactions_par_troncons$Sens[Pointeur] == 2){ # (Lancon -> A7)\n\t    newrow1 <- c(Transactions_par_troncons$ID[Pointeur],21,\"A7\",25004220,25004278,Transactions_par_troncons$KMS[Pointeur],Transactions_par_troncons$Date[Pointeur],Transactions_par_troncons$TimeEntr[Pointeur],Transactions_par_troncons$TimeSor[Pointeur],Transactions_par_troncons$DOW[Pointeur],Transactions_par_troncons$WOY[Pointeur],2)\n\t    newrow2 <- c(Transactions_par_troncons$ID[Pointeur],22,\"A7\",25004278,25004279,Transactions_par_troncons$KMS[Pointeur],Transactions_par_troncons$Date[Pointeur],Transactions_par_troncons$TimeEntr[Pointeur],Transactions_par_troncons$TimeSor[Pointeur],Transactions_par_troncons$DOW[Pointeur],Transactions_par_troncons$WOY[Pointeur],2)\n\t    Transactions_par_troncons <- rbind(Transactions_par_troncons[(1:Pointeur),],newrow1,newrow2,Transactions_par_troncons[-(1:Pointeur),])\n\t    Pointeur <- Pointeur + 2\n\t  }\n\t  if (Transactions_par_troncons$ID_Troncon[Pointeur] == 26 & Transactions_par_troncons$Sens[Pointeur] == 1){ # (La Barque -> A8)\n\t    newrow1 <- c(Transactions_par_troncons$ID[Pointeur],23,\"A8\",25004279,25006001,Transactions_par_troncons$KMS[Pointeur],Transactions_par_troncons$Date[Pointeur],Transactions_par_troncons$TimeEntr[Pointeur],Transactions_par_troncons$TimeSor[Pointeur],Transactions_par_troncons$DOW[Pointeur],Transactions_par_troncons$WOY[Pointeur],1)\n\t    newrow2 <- c(Transactions_par_troncons$ID[Pointeur],24,\"A8\",25006001,25006080,Transactions_par_troncons$KMS[Pointeur],Transactions_par_troncons$Date[Pointeur],Transactions_par_troncons$TimeEntr[Pointeur],Transactions_par_troncons$TimeSor[Pointeur],Transactions_par_troncons$DOW[Pointeur],Transactions_par_troncons$WOY[Pointeur],1)\n\t    newrow3 <- c(Transactions_par_troncons$ID[Pointeur],25,\"A8\",25006080,25006002,Transactions_par_troncons$KMS[Pointeur],Transactions_par_troncons$Date[Pointeur],Transactions_par_troncons$TimeEntr[Pointeur],Transactions_par_troncons$TimeSor[Pointeur],Transactions_par_troncons$DOW[Pointeur],Transactions_par_troncons$WOY[Pointeur],1)\n\t    Transactions_par_troncons <- rbind(Transactions_par_troncons[(1:Pointeur),],newrow1,newrow2,newrow3,Transactions_par_troncons[-(1:Pointeur),])\n\t    Pointeur <- Pointeur + 3\n\t  }\n\t  if (Transactions_par_troncons$ID_Troncon[Pointeur] == 26 & Transactions_par_troncons$Sens[Pointeur] == 2){ # (A8 -> La Barque)\n\t    newrow1 <- c(Transactions_par_troncons$ID[Pointeur],23,\"A8\",25004279,25006001,Transactions_par_troncons$KMS[Pointeur],Transactions_par_troncons$Date[Pointeur],Transactions_par_troncons$TimeEntr[Pointeur],Transactions_par_troncons$TimeSor[Pointeur],Transactions_par_troncons$DOW[Pointeur],Transactions_par_troncons$WOY[Pointeur],2)\n\t    newrow2 <- c(Transactions_par_troncons$ID[Pointeur],24,\"A8\",25006001,25006080,Transactions_par_troncons$KMS[Pointeur],Transactions_par_troncons$Date[Pointeur],Transactions_par_troncons$TimeEntr[Pointeur],Transactions_par_troncons$TimeSor[Pointeur],Transactions_par_troncons$DOW[Pointeur],Transactions_par_troncons$WOY[Pointeur],2)\n\t    newrow3 <- c(Transactions_par_troncons$ID[Pointeur],25,\"A8\",25006080,25006002,Transactions_par_troncons$KMS[Pointeur],Transactions_par_troncons$Date[Pointeur],Transactions_par_troncons$TimeEntr[Pointeur],Transactions_par_troncons$TimeSor[Pointeur],Transactions_par_troncons$DOW[Pointeur],Transactions_par_troncons$WOY[Pointeur],2)\n\t    Transactions_par_troncons <- rbind(Transactions_par_troncons[(1:Pointeur),],newrow1,newrow2,newrow3,Transactions_par_troncons[-(1:Pointeur),])\n\t    Pointeur <- Pointeur + 3\n\t  }\n\t  Pointeur <- Pointeur + 1\n\t}\n\n\treturn ( Transactions_par_troncons)\n\t}\n",
    "created" : 1437683370264.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2999982113",
    "id" : "51518974",
    "lastKnownWriteTime" : 1438335557,
    "path" : "~/Downloads/Vinci R/VA1/SA_decompose.R",
    "project_path" : "SA_decompose.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}