{
    "contents" : "##########\n##########\n# first: 20150723\n# last modified: 20150730\n# click button\n\n##########\n##########\n### EXPLANATION\n# !!! action to be added\n# ??? action with doubt\n\n##########\n##########\n### call packages\nlibrary(dplyr)\nlibrary(cluster)\nlibrary(ggplot2)\nlibrary(gridExtra)\nlibrary(knitr)\n\n##########\n##########\n### data preparation\n# load data\n# !!! to be replaced by: csv -> data.frame  \n# load(\"VIP2.RData\")\n\n# get history for: CC,FF,NP,PC\n# from 2015-1-1 to 2015-5-28\n\n# Input (Pre-model):\n#\ttrx:\t\tID Entr Sor Date DOW WOY TimeEntr TimeSor result\n# \t\ttrain\n#\t\ttest\n#\tID.list:\tID\n\n### from csv to data.frame to tbl\ninput <- read.table(\"Tis_historique.csv\", sep = \",\", header = TRUE)\ninput <- tbl_df(input)\n\nnames(input) <- c(\"pays\", \"ste\", \"ID\", \"badge\", \n                  \"sEntr\", \"cEntr\", \"voieEntr\", \"DateEntr\", \"hEntr\", \n                  \"sSor\", \"cSor\", \"voieSor\", \"hSor\", \"DateSor\")\n\n# badge\ninput$Societe <- input$pays * 100 + input$ste\n\ninput$pays <- NULL\ninput$ste <- NULL\n\n# Cde for Entr & Sor\ninput$Entr <- 25000000 + input$sEntr * 1000 + input$cEntr\ninput$Sor <- 25000000 + input$sSor * 1000 + input$cSor\ninput[input$cEntr == 0, ]$Entr <- 0 \n\ninput$sEntr <- NULL\ninput$cEntr <- NULL\ninput$sSor <- NULL\ninput$cSor <- NULL\n\n# DateSor\ninput$Y <- substr(input$DateSor, 1, 4)\ninput$M <- substr(input$DateSor, 5, 6)\ninput$D <- substr(input$DateSor, 7, 8)\ninput$Date <- as.Date(paste0(input$Y, \"-\", input$M, \"-\", input$D))\n\ninput$Y <- NULL\ninput$M <- NULL\ninput$D <- NULL\n\n# HeureSor\ninput$H <- substr(input$hSor, 1, 2)\ninput$M <- substr(input$hSor, 3, 4)\ninput$TimeSor <- as.numeric(input$H) + as.numeric(input$M) / 60 \n\ninput$H <- substr(input$hEntr, 1, 2)\ninput$M <- substr(input$hEntr, 3, 4)\ninput$TimeEntr <- as.numeric(input$H) + as.numeric(input$M) / 60 \n\ninput[is.na(input$TimeEntr), ]$TimeEntr <- input[is.na(input$TimeEntr), ]$TimeSor - .5 \n\ninput$H <- NULL\ninput$M <- NULL\n\n# Final\nInput <- input %>% select(Societe, ID, Entr, Sor, voieSor, Date, TimeEntr, TimeSor)\nInput$DOW <- as.POSIXlt(Input$Date)$wday \n\n# get ID.ref\nID.ref <- read.table(\"ID.ref.csv\", sep = \",\", header = TRUE)\nnames(ID.ref)[c(1,3,6)] <- c(\"Nom\", \"NOM\", \"ID\")\nID.ref <- ID.ref %>% select(Nom, ID)\n\n# join Input & ID.ref\nInput <-  inner_join(Input, ID.ref)\n# print(count(Input, ID) %>% full_join(ID.ref), n = 22)\n\n# predefined parameters\ntrain.start <- as.Date(\"2015-1-1\")\ntest.start <- as.Date(\"2015-5-1\")\ntest.end <- as.Date(\"2015-5-28\")\ntest.period <- data.frame(Date = seq(test.start, test.end, \"day\"))\ntest.period$DOW <- as.POSIXlt(test.period$Date)$wday\n\ntrx <- tbl_df(VIP2 %>% \n# !!! remove this phrase to have the result of all VIP in VIP2\n  filter(ID %in% c(\"CC\", \"FF\", \"NP\", \"PC\")) %>%\n  filter(Date >= train.start & Date < test.end))\n# remove Lng & Lat\ntrx <- trx[, -c(9:13)]\ntrx <- trx %>% filter(DOW < 7)\n\n# construct train & test set\ntrain <- trx %>% filter(Date < test.start)\ntest <- trx %>% filter(Date >= test.start)\n\n# get the ID list\nID.list <- trx %>% group_by(ID) %>% summarise()\n\n##########\n##########\n### Train Model\n### Explanation of Models\n# return:\n#\tresult.model.##:  \tID Entr Sor DOW Tmin Tmax Model\n#\ttest.model.##:\t\t\tID Entr SOr Date DOW WOY TimeEntr TimeSor result\n#\tind.model.##:\t\t\t\tID Ind1 Ind2 Ind3 Ind Model\n##########\n# regardless of DOW: make difference between weekdays and weekends\n# consider DOW: treat each day of week separately \n##########\n# Model 0: Benchmark\n#\t\tModel 00: regardless of DOW\t\tdone\n#\t\tModel 01: weekday & weekend\t\tdone\n#\t\tModel 02: consider DOW\t\t\t\tdone\n# Model 1: Time - Space\n# \tModel 10: regardless of DOW\t\tdone\n# \tModel 11: weekday & weekend   done\n# \tModel 12: consider DOW\t\t\t\tdone\n# Model 2: Space - Time\n# \tModel 20: regardless of DOW\t\tdone\n# \tModel 21: weekday & weekend   done\n# \tModel 22: consider DOW\t\t\t\tdone\n##########\n##########\n\n####################\n####################\n####################\n### model.0:\tBenchmark\n####################\n####################\n### model.00: Benchmark - regardless of DOW\n##########\nT.matin <- train %>%\n  filter(TimeSor < 12 ) %>%\n  group_by(ID, Entr, Sor) %>%\n  summarise(n = n(), T = mean(TimeSor), SD = sd(TimeSor), Tmin = T -SD, Tmax = T + SD)\n\nT.aprem <- train %>%\n  filter(TimeSor >= 12 ) %>%\n  group_by(ID, Entr, Sor) %>%\n  summarise(n = n(), T = mean(TimeSor), SD = sd(TimeSor), Tmin = T -SD, Tmax = T + SD)\n\nT <- rbind(T.matin, T.aprem)\n# ??? limit = 5 to be justified or modified\nT <- T %>% filter(n > 5)\n\n# add DOW\nT$DOW <- 0\ntemp <- T\nfor(i in 1:6) {\n\t# add DOW to the T\n\ttemp$DOW <- i\n\tT <- rbind(T, temp)\n}\n\nresult.model.00 <- T[, c(\"ID\", \"Entr\", \"Sor\", \"DOW\", \"Tmin\", \"Tmax\")]\nresult.model.00$Model <- 00\n##########\n### evalutaion model.00\ntest.model.00 <- GetResult(test, result.model.00)\nind.model.00 <- GetInd(test.model.00, result.model.00)\nind.model.00$Model <- 00\n\n\n####################\n####################\n### model.01: Benchmark - weekdays & weekends\n##########\ntemp <- train \ntemp$weekday <- 0\ntemp[temp$DOW %in% c(1:5), ]$weekday <- 1\n\nT.matin <- temp %>%\n  filter(TimeSor < 12 ) %>%\n  group_by(ID, Entr, Sor, weekday) %>%\n  summarise(n = n(), T = mean(TimeSor), SD = sd(TimeSor), Tmin = T -SD, Tmax = T + SD)\n\nT.aprem <- temp %>%\n  filter(TimeSor >= 12 ) %>%\n  group_by(ID, Entr, Sor, weekday) %>%\n  summarise(n = n(), T = mean(TimeSor), SD = sd(TimeSor), Tmin = T -SD, Tmax = T + SD)\n\nT <- rbind(T.matin, T.aprem)\n# ??? limit = 5 to be justified or modified\nT <- T %>% filter(n > 5)\n\n# add DOW\n# for weekdays\nresult <- T %>% filter(weekday == 1)\nresult$DOW <- 1\ntemp <- result\nfor(i in 2:5) {\n\t# add DOW to the result\n\ttemp$DOW <- i\n\tresult <- rbind(result, temp)\n}\n\n# for weekends\nT <- T %>% filter(weekday == 0)\nif (nrow(T) > 0){\n  T$DOW <- 0\n  temp <- T\n  temp$DOW <- 6\n  T <- rbind(T, temp)\n}\n\nresult <- rbind(result, T)\nresult$weekday <- NULL\n\nresult.model.01 <- result[, c(\"ID\", \"Entr\", \"Sor\", \"DOW\", \"Tmin\", \"Tmax\")]\nresult.model.01$Model <- 01\n##########\n### evalutaion model.01\ntest.model.01 <- GetResult(test, result.model.01)\nind.model.01 <- GetInd(test.model.01, result.model.01)\nind.model.01$Model <- 01\n\n####################\n####################\n### model.02: Benchmark - consider DOW\n##########\nT.matin <- train %>%\n  filter(TimeSor < 12 ) %>%\n  group_by(ID, Entr, Sor, DOW) %>%\n  summarise(nDOW = n(), T = mean(TimeSor), SD = sd(TimeSor), Tmin = T -SD, Tmax = T + SD)\n\nT.aprem <- train %>%\n  filter(TimeSor >= 12 ) %>%\n  group_by(ID, Entr, Sor, DOW) %>%\n  summarise(nDOW = n(), T = mean(TimeSor), SD = sd(TimeSor), Tmin = T -SD, Tmax = T + SD)\n\nT <- rbind(T.matin, T.aprem)\n# ??? limit = 5 to be justified or modified\nT <- T %>% filter(nDOW > 5)\n\nresult.model.02 <- T[, c(\"ID\", \"Entr\", \"Sor\", \"DOW\", \"Tmin\", \"Tmax\")]\nresult.model.02$Model <- 02\n##########\n### evalutaion model.02\ntest.model.02 <- GetResult(test, result.model.02)\nind.model.02 <- GetInd(test.model.02, result.model.02)\nind.model.02$Model <- 02\n\n\n####################\n####################\n####################\n### model.1:\tTime-Space\n# call the function to get the troncons\ntrain_decompose <- AfterDecompose(Decompose(BeforeDecompose(train)))  \ntest_decompose <- AfterDecompose(Decompose(BeforeDecompose((test))))\n\n####################\n####################\n### model.10: Time-Space - regardless of DOW\n# clustering TimeSor\nresult <- data.frame(ID=\"\", Entr=0, Sor=0, SD=0, T=0, Tmin=0, Tmax=0, n=0)\nfor (i in 1:nrow(ID.list)) {\n  temp <- train_decompose %>% filter(ID == ID.list$ID[i])\n  # ??? limit = 10 to be justified or modified\n  if(nrow(temp) >= 10) {\n\t\tmax.cluster <- length(unique(temp$TimeSor))\n    # if not many passages, we will not cluster\n    # decide nb of cluster\n    clus<- clusGap(temp[,\"TimeSor\"], kmeans, min(9, max.cluster))\n    n.cluster <- with(clus,maxSE(Tab[,\"gap\"],Tab[,\"SE.sim\"]))\n    \n    set.seed(1234)\n    temp.kmeans <-   kmeans(temp[, \"TimeSor\"], centers = n.cluster)\n    temp$cluster <- temp.kmeans$cluster\n    T <- temp %>%\n      group_by(ID, Entr, Sor, cluster) %>%\n      summarise(n = n(), T = mean(TimeSor), SD = sd(TimeSor), Tmin = T -SD, Tmax = T + SD)\n\t\t\n\t\t# remove line with SD = N.A.\n    T <- T %>% filter(n > 1)\n    \n    T$cluster <- NULL\n    result <- rbind(result, T)\n    } # end of if\n} # end of loop i\n\nresult <- result[-1,]\n# ??? parameter: 5\nresult <- result %>% filter(n > 5)\n\n# add DOW\nresult$DOW <- 0\ntemp <- result\nfor(i in 1:6) {\n\t# add DOW to the T\n\ttemp$DOW <- i\n\tresult <- rbind(result, temp)\n}\n\nresult.model.10 <- result[, c(\"ID\", \"Entr\", \"Sor\", \"DOW\", \"Tmin\", \"Tmax\")]\nresult.model.10$DOW <- as.numeric(result.model.10$DOW)\nresult.model.10$Model <- 10\n##########\n### evalutaion model.10\ntest.model.10 <- GetResult(test_decompose, result.model.10)\nind.model.10 <- GetInd(test.model.10, result.model.10)\nind.model.10$Model <- 10\n\n\n\n####################\n####################\n### model1.11: Time-Space - weekdays & weekends\ntemp1 <- train_decompose \ntemp1$weekday <- 0\ntemp1[temp1$DOW %in% c(1:5), ]$weekday <- 1\n\n# clustering TimeSor\nresult <- data.frame(ID=\"\", Entr=0, Sor=0, weekday = 0, SD=0, T=0, Tmin=0, Tmax=0, n=0)\nfor (i in 1:nrow(ID.list)) {\n\tfor (j in 0:1) {\n\t  temp <- temp1 %>% filter(ID == ID.list$ID[i] & weekday == j)\n\t  # ??? limit = 10 to be justified or modified\n\t  if(nrow(temp) >= 10) {\n\t\t\tmax.cluster <- length(unique(temp$TimeSor))\n\t    # if not many passages, we will not cluster\n\t    # decide nb of cluster\n\t    clus<- clusGap(temp[,\"TimeSor\"], kmeans, min(9, max.cluster))\n\t    n.cluster <- with(clus,maxSE(Tab[,\"gap\"],Tab[,\"SE.sim\"]))\n    \n\t    set.seed(1234)\n\t    temp.kmeans <-   kmeans(temp[, \"TimeSor\"], centers = n.cluster)\n\t    temp$cluster <- temp.kmeans$cluster\n\t    T <- temp %>%\n\t      group_by(ID, Entr, Sor, weekday, cluster) %>%\n\t      summarise(n = n(), T = mean(TimeSor), SD = sd(TimeSor), Tmin = T -SD, Tmax = T + SD)\n\t\t\n\t\t\t# remove line with SD = N.A.\n\t    T <- T %>% filter(n > 1)\n    \n\t    T$cluster <- NULL\n\t    result <- rbind(result, T)\n\t    } # end of if\n\t} # end of loop j\n} # end of loop i\n\nresult <- result[-1,]\n# ??? parameter: 5\nresult <- result %>% filter(n > 5)\n\nT <- result  \n# add DOW\n# for weekdays\nresult <- T %>% filter(weekday == 1)\nresult$DOW <- 1\ntemp <- result\nfor(i in 2:5) {\n\t# add DOW to the result\n\ttemp$DOW <- i\n\tresult <- rbind(result, temp)\n}\n\n\n# for weekends\nT <- T %>% filter(weekday == 0)\nif (nrow(T) > 0){\n  T$DOW <- 0\n  temp <- T\n  temp$DOW <- 6\n  T <- rbind(T, temp)\n}\n\nresult <- rbind(result, T)\nresult$weekday <- NULL\n\nresult.model.11 <- result[, c(\"ID\", \"Entr\", \"Sor\", \"DOW\", \"Tmin\", \"Tmax\")]\nresult.model.11$DOW <- as.numeric(result.model.11$DOW)\nresult.model.11$Model <- 11\n##########\n### evalutaion model.11\ntest.model.11 <- GetResult(test_decompose, result.model.11)\nind.model.11 <- GetInd(test.model.11, result.model.11)\nind.model.11$Model <- 11\n\n\n####################\n####################\n### model.12: Time-Space - consider DOW\n# clustering TimeSor\nresult <- data.frame(ID=\"\", Entr=0, Sor=0, DOW=0, SD=0, T=0, Tmin=0, Tmax=0, n=0)\nfor (i in 1:nrow(ID.list)) {\n  for (j in 0:6) {\n    temp <- train_decompose %>% filter(ID == ID.list$ID[i] & DOW == j)\n    # ??? limit = 10 to be justified or modified\n    if(nrow(temp) >= 10) {\n\t\t\tmax.cluster <- length(unique(temp$TimeSor))\n      # if not many passages, we will not cluster\n      # decide nb of cluster\n      clus<- clusGap(temp[,\"TimeSor\"], kmeans, min(9, max.cluster))\n      n.cluster <- with(clus,maxSE(Tab[,\"gap\"],Tab[,\"SE.sim\"]))\n      \n      set.seed(1234)\n      temp.kmeans <-   kmeans(temp[, \"TimeSor\"], centers = n.cluster)\n      temp$cluster <- temp.kmeans$cluster\n      T <- temp %>%\n        group_by(ID, Entr, Sor, DOW, cluster) %>%\n        summarise(n = n(), T = mean(TimeSor), SD = sd(TimeSor), Tmin = T -SD, Tmax = T + SD)\n\t\t\t\n\t\t\t# remove line with SD = N.A.\n      T <- T %>% filter(n > 1)\n      \n      T$cluster <- NULL\n      result <- rbind(result, T)\n      } # end of if\n    } # end of loop j\n} # end of loop i\n\nresult <- result[-1,]\n# ??? parameter: 5\nresult <- result %>% filter(n > 5)\nresult.model.12 <- result[, c(\"ID\", \"Entr\", \"Sor\", \"DOW\", \"Tmin\", \"Tmax\")]\nresult.model.12$DOW <- as.numeric(result.model.12$DOW)\nresult.model.12$Model <- 12\n##########\n### evalutaion model.12\ntest.model.12 <- GetResult(test_decompose, result.model.12)\nind.model.12 <- GetInd(test.model.12, result.model.12)\nind.model.12$Model <- 12\n\n\n\n\n\n\n\n\n\n\n\n\n\n##########\n##########\n# compare model results\n##########\nInd <- rbind(ind.model.00, ind.model.01, ind.model.02, ind.model.10, ind.model.11, ind.model.12)\nInd.result <- Ind %>% group_by(ID) %>% summarise(Model = sum(Model[Ind == max(Ind)]))\n\nresult <- rbind(result.model.00, result.model.01, result.model.02, result.model.10, result.model.11, result.model.12)\n\nresult.final <- inner_join(result, Ind.result)\nresult.LngLat <- GetLngLat(result)\n\n# output: csv file\nresult.final$Model <- NULL\nwrite.table(result.final, file=\"result.csv\", sep = \";\", row.names = F, quote = F)\n\n\n",
    "created" : 1438190023106.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3974989168",
    "id" : "2A14AE65",
    "lastKnownWriteTime" : 1438680410,
    "path" : "~/Downloads/Vinci R/VA1/SA_end2end.R",
    "project_path" : "SA_end2end.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}