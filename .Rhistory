input$sSor <- as.character(input$sSor)
input[input$sSor < 10, ]$sSor <- paste0("0", input[input$sSor < 10, ]$sSor)
input[input$sSor < 10, ]$sSor
count(input, Sor)
input[input$sSor < 10, ]
count(input, sSor)
class(input$sSor)
input$sSor>10
input$sSor<10
sum(input$sSor<10)
input$sSor <- as.numeric(input$sSor)
input[input$sSor < 10, ]$sSor <- paste0("0", input[input$sSor < 10, ]$sSor)
input
class(input$Entr)
class(input$Sor)
count(input, Entr)
count(input, Sor)
max(input$Sor)
min(input$Sor)
max(input$Entr)
input$Entr <- as.character(input$Entr)
input[input$Entr < 10, ]$Entr <- paste0("0", input[input$Entr < 10, ]$Entr)
input[input$Entr < 100, ]$Entr <- paste0("0", input[input$Entr < 100, ]$Entr)
input$Sor <- as.character(input$Sor)
input[input$Sor < 10, ]$Sor <- paste0("0", input[input$Sor < 10, ]$Sor)
input[input$Sor < 100, ]$Sor <- paste0("0", input[input$Sor < 100, ]$Sor)
input
input$Sor <- as.numeric(input$Sor)
input[input$Sor < 10, ]$Sor <- paste0("0", input[input$Sor < 10, ]$Sor)
input[input$Sor < 100, ]$Sor <- paste0("0", input[input$Sor < 100, ]$Sor)
input$Sor <- as.numeric(input$Sor)
input
input[input$Sor < 10, ]$Sor <- paste0("0", input[input$Sor < 10, ]$Sor)
input[input$Sor < 100, ]$Sor <- paste0("0", input[input$Sor < 100, ]$Sor)
count(input,Sor)
input$Entr <- as.numeric(input$Entr)
input[input$Entr < 10, ]$Entr <- paste0("0", input[input$Entr < 10, ]$Entr)
input[input$Entr < 100, ]$Entr <- paste0("0", input[input$Entr < 100, ]$Entr)
count(input,Entr)
input$aEntr <- paste0(250, input$sEntr, input$Entr)
input
input$Entr <- as.numeric(input$Entr)
input[input$Entr < 10, ]$Entr <- paste0("0", input[input$Entr < 10, ]$Entr)
input[input$Entr < 100, ]$Entr <- paste0("0", input[input$Entr < 100, ]$Entr)
input
input$Sor <- as.numeric(input$Sor)
input[input$Sor < 10, ]$Sor <- paste0("0", input[input$Sor < 10, ]$Sor)
input[input$Sor < 100, ]$Sor <- paste0("0", input[input$Sor < 100, ]$Sor)
input
input[input$Sor < 100 & input$Sor >= 10, ]$Sor <- paste0("0", input[input$Sor < 100 & input$Sor >= 10, ]$Sor)
input$Sor[1]
t<-input$Sor[1]
t
class(t)
paste0(0,t)
input
input$Sor <- as.numeric(input$Sor)
input[input$Sor < 10, ]$Sor <- paste0(0, input[input$Sor < 10, ]$Sor)
input[input$Sor < 100, ]$Sor <- paste0(0, input[input$Sor < 100, ]$Sor)
input
input$Sor[1]
paste0(0,input$Sor[1])
input[input$Sor < 100, ]$Sor <- paste0(0, input[input$Sor < 100, ]$Sor)
input
input[input$Sor < 10, ]$Sor <- paste0(0, input[input$Sor < 10, ]$Sor)
input[input$Sor < 100, ]$Sor <- paste0(0, input[input$Sor < 100, ]$Sor)
input
input$Sor <- as.numeric(input$Sor)
input <- read.table("Tis_historique.csv", sep = ",", header = TRUE)
input <- tbl_df(input)
names(input) <- c("pays", "ste", "client", "badge",
"sEntr", "Entr", "vEntr", "DateEntr", "hEntr",
"sSor", "Sor", "vSor", "hSor", "DateSor")
input$aEntr <- 25000000 + input$sEntr * 1000 + input$Entr
input
input$aSor <- 25000000 + input$sSor * 1000 + input$Sor
input
input[input$Entr == 0, ]$aEntr <- 0
input
count(input, Entr)
count(input, aEntr)
names(input) <- c("pays", "ste", "client", "badge",
"sEntr", "cEntr", "vEntr", "DateEntr", "hEntr",
"sSor", "cSor", "vSor", "hSor", "DateSor")
names(input) <- c("pays", "ste", "client", "badge",
"sEntr", "cEntr", "vEntr", "DateEntr", "hEntr",
"sSor", "cSor", "vSor", "hSor", "DateSor")
# Cde for Entr & Sor
input$Entr <- 25000000 + input$sEntr * 1000 + input$cEntr
input$Sor <- 25000000 + input$sSor * 1000 + input$cSor
input[input$cEntr == 0, ]$Entr <- 0
input
input$sEntr <- NULL
input$cEntr <- NULL
input$sSor <- NULL
input$cSor <- NULL
input
input$NA
input <- read.table("Tis_historique.csv", sep = ",", header = TRUE)
input <- tbl_df(input)
names(input) <- c("pays", "ste", "client", "badge",
"sEntr", "cEntr", "vEntr", "DateEntr", "hEntr",
"sSor", "cSor", "vSor", "hSor", "DateSor")
# Cde for Entr & Sor
input$Entr <- 25000000 + input$sEntr * 1000 + input$cEntr
input$Sor <- 25000000 + input$sSor * 1000 + input$cSor
input[input$cEntr == 0, ]$Entr <- 0
input
input$sEntr <- NULL
input$cEntr <- NULL
input$sSor <- NULL
input$cSor <- NULL
input
input %>% filter(DateEntr <> DateSor)
input %>% filter(DateEntr != DateSor)
dim(input)
input %>% filter(DateEntr != DateSor & DateEntr != 0)
input <- read.table("Tis_historique.csv", sep = ",", header = TRUE)
input <- tbl_df(input)
names(input) <- c("pays", "ste", "ID", "badge",
"sEntr", "cEntr", "voieEntr", "DateEntr", "hEntr",
"sSor", "cSor", "voieSor", "hSor", "DateSor")
# badge
input$Societe <- input$pays * 10 + input$ste
# Cde for Entr & Sor
input$Entr <- 25000000 + input$sEntr * 1000 + input$cEntr
input$Sor <- 25000000 + input$sSor * 1000 + input$cSor
input[input$cEntr == 0, ]$Entr <- 0
input$sEntr <- NULL
input$cEntr <- NULL
input$sSor <- NULL
input$cSor <- NULL
input
input$Societe <- input$pays * 100 + input$ste
input
input$pays <- NULL
input$ste <- NULL
as.Date(1)
as.Date(0)
as.Date(0, orgin = as.Date("0000-0-0"))
as.Date(0, orgin = as.Date("0000-1-1"))
as.Date(1, orgin = as.Date("0000-1-1"))
as.Date(1, orgin = as.Date("1900-1-1"))
as.Date(1, origin = as.Date("1900-1-1")))
as.Date(1, origin = as.Date("1900-1-1"))
as.Date(1, origin = as.Date("0000-1-1"))
as.Date(1, origin = as.Date("-1-1-1"))
as.Date(1, origin = as.Date("0-1-1"))
as.Date(0, origin = as.Date("0-1-1"))
as.Date(20150803, origin = as.Date("0-1-1"))
as.Date(paste(2015,1,1))
input$Y <- substr(DateSor, 1, 4)
input$M <- substr(DateSor, 5, 6)
input$D <- substr(DateSor, 7, 8)
input$Date <- as.Date(paste0(input$Y, "-", input$M, "-", input$D))
input
input$Y <- substr(input$DateSor, 1, 4)
input$M <- substr(input$DateSor, 5, 6)
input$D <- substr(input$DateSor, 7, 8)
input$Y <- substr(input$DateSor, 1, 4)
input$M <- substr(input$DateSor, 5, 6)
input$D <- substr(input$DateSor, 7, 8)
input$Date <- as.Date(paste0(input$Y, "-", input$M, "-", input$D))
input
input$Y <- NULL
input$M <- NULL
input$D <- NULL
input
input$Y <- substr(input$DateSor, 1, 4)
input$M <- substr(input$DateSor, 5, 6)
input$D <- substr(input$DateSor, 7, 8)
input$DateSor <- as.Date(paste0(input$Y, "-", input$M, "-", input$D))
input$Y <- NULL
input$M <- NULL
input$D <- NULL
input
input$Date<-NULL
input
input$H <- substr(input$hSor, 1, 2)
input$M <- substr(input$hSor, 3, 4)
input$S <- substr(input$hSor, 5, 6)
input$TimeSor <- input$H + input$M/60 + input$S/3600
input
input$TimeSor
input$TimeSor <- input$H + input$M/60
input$TimeSor <- input$H + as.numeric(input$M) / 60
input$TimeSor <- input$H + as.numeric(input$M) / 60
input$H <- substr(input$hSor, 1, 2)
input$M <- substr(input$hSor, 3, 4)
input$S <- substr(input$hSor, 5, 6)
input$TimeSor <- input$H + as.numeric(input$M) / 60
input
class(input$M)
input$M
input$M/60
as.numeric(input$M)/60
input$TimeSor <- as.numeric(input$H) + as.numeric(input$M) / 60
input$S<- NULL
input$H <- substr(input$hEntr, 1, 2)
input$M <- substr(input$hEntr, 3, 4)
input$TimeEntr <- as.numeric(input$H) + as.numeric(input$M) / 60
input
input[is.na(TimeEntr),]
input[is.na(TimeEntr)]
input[is.na(input$TimeEntr), ]
input[is.na(input$TimeEntr), ]$TimeEntr <- input[is.na(input$TimeEntr), ]$TimeSor - .5
input$H <- NULL
input$M <- NULL
input <- read.table("Tis_historique.csv", sep = ",", header = TRUE)
input <- tbl_df(input)
names(input) <- c("pays", "ste", "ID", "badge",
"sEntr", "cEntr", "voieEntr", "DateEntr", "hEntr",
"sSor", "cSor", "voieSor", "hSor", "DateSor")
# badge
input$Societe <- input$pays * 100 + input$ste
input$pays <- NULL
input$ste <- NULL
# Cde for Entr & Sor
input$Entr <- 25000000 + input$sEntr * 1000 + input$cEntr
input$Sor <- 25000000 + input$sSor * 1000 + input$cSor
input[input$cEntr == 0, ]$Entr <- 0
input$sEntr <- NULL
input$cEntr <- NULL
input$sSor <- NULL
input$cSor <- NULL
# DateSor
input$Y <- substr(input$DateSor, 1, 4)
input$M <- substr(input$DateSor, 5, 6)
input$D <- substr(input$DateSor, 7, 8)
input$Date <- as.Date(paste0(input$Y, "-", input$M, "-", input$D))
input$Y <- NULL
input$M <- NULL
input$D <- NULL
# HeureSor
input$H <- substr(input$hSor, 1, 2)
input$M <- substr(input$hSor, 3, 4)
input$TimeSor <- as.numeric(input$H) + as.numeric(input$M) / 60
input$H <- substr(input$hEntr, 1, 2)
input$M <- substr(input$hEntr, 3, 4)
input$TimeEntr <- as.numeric(input$H) + as.numeric(input$M) / 60
input[is.na(input$TimeEntr), ]$TimeEntr <- input[is.na(input$TimeEntr), ]$TimeSor - .5
input$H <- NULL
input$M <- NULL
input
Input <- input %>% select(Societe, ID, Date, Entr, Sor, TimeEntr, TimeSor)
Input
Input <- input %>% select(Societe, ID, Entr, Sor, Date, TimeEntr, TimeSor)
as.Date("2015/8/3")
as.POSIXct( as.Date("2015/8/3") )$wday
as.POSIXlt( as.Date("2015/8/3") )$wday
Input$DOW <- as.POSIXlt(Input$Date)$wday
Input
count(Input, ID)
Input <- input %>% select(Societe, ID, Entr, Sor, voieSor, Date, TimeEntr, TimeSor)
Input$DOW <- as.POSIXlt(Input$Date)$wday
Input
ID.ref <- read.table("ID.ref.csv", sep = ",", header = TRUE)
ID.ref
ID.ref <- read.table("ID.ref.csv", sep = ",", header = TRUE)
ID.ref
names(ID.ref)[c(1,3,6)] <- c(Nom, NOM, ID)
ID.ref %>% select(Nom, ID)
ID.ref <- read.table("ID.ref.csv", sep = ",", header = TRUE)
names(ID.ref)[c(1,3,6)] <- c("Nom", "NOM", "ID")
ID.ref %>% select(Nom, ID)
ID.ref <- ID.ref %>% select(Nom, ID)
Input
ID.ref
count(Input, ID)
count(Input, ID) %>% full_join(ID.ref)
print(count(Input, ID) %>% full_join(ID.ref), 22)
print(Input, nrow = 20)
help(print)
print(count(Input, ID) %>% full_join(ID.ref), n = 22)
Input <-  inner_join(Input, ID.ref)
Input
save.image()
source('~/Downloads/Vinci R/VA1/SA_end2end.R', echo=TRUE)
source('~/Downloads/Vinci R/VA1/SA_end2end.R', echo=TRUE)
load("MODELE.RData")
MODELE
source('~/Downloads/Vinci R/VA1/SA_end2end.R', echo=TRUE)
head(VIP2)
VIP2 <- VIP2[VIP2$ID %in% c("CC","FF", "NP", "PC") & VIP2$Date > as.Date("2014-12-31") & VIP2$Date < as.Date("2015-5-29"), ]
x <- vector(mode = "integer", length = nrow(VIP2))
VIP2 <- cbind(VIP2[,1:3],x,x,x,x,x,x,VIP2$TimeEntr,VIP2$TimeSor,VIP2$DOW,VIP2$WOY,VIP2$Date)
colnames(VIP2)<- c(colnames(MODELE),"Date")
VIP2 <- cbind(VIP2[,1:3],x,x,x,x,x,x,VIP2$TimeEntr,VIP2$TimeSor,VIP2$DOW,VIP2$WOY,VIP2$Date)
colnames(VIP2)<- c(colnames(MODELE),"Date")
MODELE
colnames(VIP2)
load("VIP2.RData")
head(VIP2)
trx <- tbl_df(VIP2 %>%
# !!! remove this phrase to have the result of all VIP in VIP2
filter(ID %in% c("CC", "FF", "NP", "PC")) %>%
filter(Date >= train.start & Date < test.end))
# remove Lng & Lat
trx <- trx[, -c(9:13)]
trx <- trx %>% filter(DOW < 7)
# construct train & test set
train <- trx %>% filter(Date < test.start)
test <- trx %>% filter(Date >= test.start)
VIP2 <- VIP2[VIP2$ID %in% c("CC","FF", "NP", "PC") & VIP2$Date > as.Date("2014-12-31") & VIP2$Date < as.Date("2015-5-29"), ]
x <- vector(mode = "integer", length = nrow(VIP2))
VIP2 <- cbind(VIP2[,1:3],x,x,x,x,x,x,VIP2$TimeEntr,VIP2$TimeSor,VIP2$DOW,VIP2$WOY,VIP2$Date)
colnames(VIP2)<- c(colnames(MODELE),"Date")
VIP2_pour_modele <- VIP2[VIP2$Date < as.Date("2015-5-1"),]
VIP2_pour_test <- VIP2[VIP2$Date >= as.Date("2015-5-1"),]
VIP2_decompose <- Decompose(VIP2_pour_modele)
VIP2_pour_test_par_troncons <- Decompose(VIP2_pour_test)
# get the ID list
ID.list <- as.data.frame(VIP2_decompose %>% group_by(ID) %>% summarise())
#######
#COMPTAGE DES TRAJETS PAR TRONCON (PAR SENS ? PAS ENCORE)
#######
Compteur <- VIP2_decompose %>%
group_by(ID, ID_Troncon) %>%
summarise( n = n())
########
#DECISION AUTOMATIQUE DES TRONCONS FREQUENTS
########
# ??? [Pourcentagedumax max ; max ]
Pourcentagedumax <- 0.56
Troncon_Selection <- Compteur %>%
group_by(ID) %>%
filter (n > (Pourcentagedumax * max(n)))
VIP2_espace <- inner_join(VIP2_decompose, Troncon_Selection, by = c("ID","ID_Troncon"))
########
# Kmeans
########
VIP2_espace$TimeSor <- as.numeric(VIP2_espace$TimeSor)
VIP2_espace <- tbl_df(VIP2_espace)
####################
####################
###  Model 20 : Space - Time
########
result.model.20 <- data.frame(ID="", Entr=0, Sor=0, DOW=0, SD=0, T=0, Tmin=0, Tmax=0, n=0)
for (k in 1:75){
for (i in 1:nrow(ID.list)){
temp <- VIP2_espace %>% filter(ID == ID.list$ID[i] &  ID_Troncon == k )
# base to be verified
if(nrow(temp) >= 10) {
# if not many passages, we will not cluster
max.cluster <- length(unique(temp$TimeSor))
# decide nb of cluster
clus<- clusGap(temp[,"TimeSor"], kmeans, min(5, max.cluster))
n.cluster <- with(clus,maxSE(Tab[,"gap"],Tab[,"SE.sim"]))
set.seed(1234)
temp.kmeans <-   kmeans(temp[, "TimeSor"], centers = n.cluster)
temp$cluster <- temp.kmeans$cluster
T <- temp %>%
group_by(ID, Entr, Sor, DOW, cluster) %>%
summarise(SD = sd(TimeSor), T = mean(TimeSor),Tmin = T -SD, Tmax = T + SD, n = n())
T <- T %>% filter(n>1)
T$cluster <- NULL
result.model.20 <- rbind(result.model.20, T)
}
}
}
result.model.20 <- result.model.20[-1,]
result.model.20<- result.model.20[,-c(5:6,9)]
result.model.20$Model <- 20
result.model.20$DOW <- as.integer(result.model.20$DOW)
result.model.20$ID <- as.character(result.model.20$ID)
##########
### evalutaion model.20
test.model.20 <- GetResult(VIP2_pour_test_par_troncons, result.model.20)
ind.model.20 <- GetInd(test.model.20, result.model.20)
ind.model.20$Model <- 20
####################
####################
### Model 21 : Space - Time & Weekdays vs weekends
########
VIP2_espace$weekday <- 0
VIP2_espace[VIP2_espace$DOW %in% c(1:5), ]$weekday <- 1
result.model.21 <- data.frame(ID="", Entr=0, Sor=0, DOW=0, SD=0, T=0, Tmin=0, Tmax=0, n=0)
for (k in 1:75){
for (i in 1:nrow(ID.list)){
for (j in 0:1){
temp <- VIP2_espace %>% filter(ID == ID.list$ID[i] &  ID_Troncon == k & weekday == j)
# base to be verified
if(nrow(temp) >= 10) {
# if not many passages, we will not cluster
max.cluster <- length(unique(temp$TimeSor))
# decide nb of cluster
clus<- clusGap(temp[,"TimeSor"], kmeans, min(5, max.cluster))
n.cluster <- with(clus,maxSE(Tab[,"gap"],Tab[,"SE.sim"]))
set.seed(1234)
temp.kmeans <-   kmeans(temp[, "TimeSor"], centers = n.cluster)
temp$cluster <- temp.kmeans$cluster
T <- temp %>%
group_by(ID, Entr, Sor, DOW, cluster) %>%
summarise(SD = sd(TimeSor), T = mean(TimeSor),Tmin = T -SD, Tmax = T + SD, n = n())
T <- T %>% filter(n>1)
T$cluster <- NULL
result.model.21 <- rbind(result.model.21, T)
}
}
}
}
result.model.21 <- result.model.21[-1,]
result.model.21<- result.model.21[,-c(5:6,9)]
result.model.21$Model <- 21
result.model.21$DOW <- as.integer(result.model.21$DOW)
result.model.21$ID <- as.character(result.model.21$ID)
##########
### evalutaion model.21
test.model.21 <- GetResult(VIP2_pour_test_par_troncons, result.model.21)
ind.model.21 <- GetInd(test.model.21, result.model.21)
ind.model.21$Model <- 21
####################
####################
###  Model 22 : Space - Time & by DOW
########
VIP2_espace_temps <- data.frame(ID="", Entr=0, Sor=0, DOW=0, SD=0, T=0, Tmin=0, Tmax=0, n=0)
for (k in 1:75){
for (i in 1:nrow(ID.list)){
for (j in 0:6){
temp <- VIP2_espace %>% filter(ID == ID.list$ID[i] & DOW == j &  ID_Troncon == k )
# base to be verified
if(nrow(temp) >= 10) {
# if not many passages, we will not cluster
max.cluster <- length(unique(temp$TimeSor))
# decide nb of cluster
clus<- clusGap(temp[,"TimeSor"], kmeans, min(5, max.cluster))
n.cluster <- with(clus,maxSE(Tab[,"gap"],Tab[,"SE.sim"]))
set.seed(1234)
temp.kmeans <-   kmeans(temp[, "TimeSor"], centers = n.cluster)
temp$cluster <- temp.kmeans$cluster
T <- temp %>%
group_by(ID, Entr, Sor, DOW, cluster) %>%
summarise(SD = sd(TimeSor), T = mean(TimeSor),Tmin = T -SD, Tmax = T + SD, n = n())
T <- T %>% filter(n>1)
T$cluster <- NULL
VIP2_espace_temps <- rbind(VIP2_espace_temps, T)
}
}
}
}
VIP2_espace_temps <- VIP2_espace_temps[-1,]
result.model.22<- VIP2_espace_temps[,-c(5:6,9)]
result.model.22$Model <- 22
result.model.22$DOW <- as.integer(result.model.22$DOW)
result.model.22$ID <- as.character(result.model.22$ID)
test.model.22 <- GetResult(VIP2_pour_test_par_troncons, result.model.22)
ind.model.22 <- GetInd(test.model.22, result.model.22)
ind.model.22$Model <- 22
Ind <- rbind(ind.model.00, ind.model.01, ind.model.02,
ind.model.10, ind.model.11, ind.model.12,
ind.model.20, ind.model.21, ind.model.22)
Ind.result <- Ind %>% group_by(ID) %>% summarise(Model = sum(Model[Ind == max(Ind)]))
result <- rbind(result.model.00, result.model.01, result.model.02,
result.model.10, result.model.11, result.model.12,
result.model.20, result.model.21, result.model.22)
Ind.result
Ind
print(Ind, n =36)
Ind.result
plot(Ind)
ggplot(Ind) + geom_hline(Ind)
ggplot(Ind) + geom_hline(aes(Ind!))
ggplot(Ind) + geom_hline(aes(Ind1))
Ind
ggplot(Ind) + geom_hline(aes(ID, Ind1))
ggplot(Ind) + geom_hline(aes(Ind1)) + facet_grid(ID~Model)
ggplot(Ind) + geom_hline(aes(Ind1)) + facet_grid(ID)
ggplot(Ind) + geom_hline(aes(Ind1)) + facet_wrap(~ID)
ggplot(Ind) + geom_hline(aes(Ind1)) + facet_wrap(~Model)
ggplot(Ind) + geom_hline(aes(Ind1))
ggplot(Ind) + geom_hline(aes(Model, Ind1))
ggplot(Ind) + geom_point(aes(Model, Ind1))
ggplot(Ind) + geom_point(aes(Model, Ind1, col = as.factor(ID)))
ggplot(Ind) +
geom_point(aes(Model, Ind1, col = as.factor(ID))) +
geom_point(aes(Model, Ind2, col = as.factor(ID))) +
geom_point(aes(Model, Ind3, col = as.factor(ID)))
ggplot(Ind) +
geom_point(aes(Model, Ind1, col = as.factor(ID)), shape = "Ind1") +
geom_point(aes(Model, Ind2, col = as.factor(ID)), shape = "Ind2") +
geom_point(aes(Model, Ind3, col = as.factor(ID)), shape = "Ind3")
ggplot(Ind) +
geom_tile(aes(Model, Ind1, col = as.factor(ID)), shape = "Ind1") +
geom_point(aes(Model, Ind2, col = as.factor(ID)), shape = "Ind2") +
geom_point(aes(Model, Ind3, col = as.factor(ID)), shape = "Ind3")
ggplot(Ind) +
geom_tile(aes(Model, Ind1, col = as.factor(ID)), shape = "Ind1") +
geom_tile(aes(Model, Ind2, col = as.factor(ID)), shape = "Ind2") +
geom_point(aes(Model, Ind3, col = as.factor(ID)), shape = "Ind3")
ggplot(Ind) +
geom_tile(aes(Model, Ind1, col = as.factor(ID)), fill = "Ind1") +
geom_tile(aes(Model, Ind2, col = as.factor(ID)), fill = "Ind2") +
geom_point(aes(Model, Ind3, col = as.factor(ID)), shape = "Ind3")
ggplot(Ind) +
geom_point(aes(Model, Ind1, col = as.factor(ID)), shape = "Ind1") +
geom_point(aes(Model, Ind2, col = as.factor(ID)), shape = "Ind2") +
geom_point(aes(Model, Ind3, col = as.factor(ID)), shape = "Ind3")
ggplot(Ind) +
geom_point(aes(Model, Ind1, col = as.factor(ID))) +
geom_point(aes(Model, Ind2, col = as.factor(ID))) +
geom_point(aes(Model, Ind3, col = as.factor(ID)))
ggplot(Ind) +
geom_point(aes(Model, Ind1)) +
geom_point(aes(Model, Ind2)) +
geom_point(aes(Model, Ind3)) +
facet_wrap(~ID)
ggplot(Ind) +
geom_point(aes(Model, Ind1, col = "Ind1")) +
geom_point(aes(Model, Ind2, col = "Ind2")) +
geom_point(aes(Model, Ind3, col = "Ind3")) +
facet_wrap(~ID)
Ind
