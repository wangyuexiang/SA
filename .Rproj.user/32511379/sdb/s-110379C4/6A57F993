{
    "contents" : "# load(\"Troncons_A789.RData\")\n# load(\"A7_par_pk.RData\")\n# load(\"A8_par_pk.RData\")\n# load(\"A9_par_pk.RData\")\n# load(\"Troncons_A7.RData\")\n# load(\"Troncons_A8.RData\")\n# load(\"Troncons_A9.RData\")\n# gares <- read.table(\"garesLatLng.csv\", header = T, sep = \",\")\n\n# remove unuseful data set after Rmd\nrm(centers1, centers2, cl1, cl2, gg1, gg2, within.ss, t.kmeans)\nrm(T.matin, T.aprem)\nrm(i,j,clus)\nrm(T, temp)\n##########\n### CC\n\ntrain_decompose.LngLat <- GetLngLat(train_decompose)\n\nggplot(train_decompose.LngLat) + \n  geom_point(aes(ELng, ELat, col = \"Entr\")) +\n  geom_point(aes(SLng, SLat, col = \"Sor\")) +\n  geom_segment(aes(x = ELng, xend = SLng, y = ELat, yend = SLat)) + \n  facet_wrap(~ID) + ggtitle(\"Result: Geo-representation\")\n\t\nggplot(train_decompose.LngLat) + \n  geom_point(aes(ELng, ELat, col = \"Entr\")) +\n  geom_point(aes(SLng, SLat, col = \"Sor\")) +\n  geom_segment(aes(x = ELng, xend = SLng, y = ELat, yend = SLat)) \n\n\n\n\n##########\n# viz: test result\nggplot(test_decompose) + geom_point(aes(Date, TimeSor, col = as.factor(result))) + facet_wrap(~ID) + ggtitle(\"Test Result\")\n\n##########\n# viz: trian result - prepare\ntemp <- train_decompose\ntemp$result <- 0\nfor (i in 1:nrow(result)){\n  temp[\n    temp$ID   == result$ID[i] &\n      temp$Sor  == result$Sor[i]&\n      temp$DOW  == result$DOW[i]&\n      temp$TimeSor >= result$Tmin[i]&\n      temp$TimeSor <= result$Tmax[i],\n    \"result\"]<-1\n}\n##########\n# viz: train result\nggplot(temp) + geom_point(aes(Date, TimeSor, col = as.factor(result))) + facet_wrap(~ID) + ggtitle(\"Train Result\")\nggplot(VIP2) + geom_point(aes(Date, TimeSor)) + facet_wrap(~ID) + ggtitle(\"VIP2\")\n\n\n##########\n# viz: result\nggplot(result) + \n  geom_point(aes(DOW, Tmin, col = \"Tmin\")) +\n  geom_point(aes(DOW, Tmax, col = \"Tmax\")) +\n  geom_segment(aes(x=DOW, xend=DOW, y=Tmin, yend=Tmax)) +\n  facet_grid(ID~Model) + ggtitle(\"Result: Time Interval by DOW\")\n\n\n##########\n# get the number of cluster\ntemp <- trx\nggplot(temp) + geom_point(aes(Date, TimeSor, shape = as.factor(DOW))) + facet_wrap(~ID)\n\nclus<- clusGap(temp[,\"TimeSor\"], kmeans, 10)\nclus\nwith(clus,maxSE(Tab[,\"gap\"],Tab[,\"SE.sim\"]))\nplot(clus)\n\n\n\n  \n\n\n\n##########\n##########\n# OLD\n##########\n##########\n  \n##########\n# model02: Benchmark - consider DOW\n##########\nmatin <- train %>%\n  select(ID, Entr, Sor, Date, DOW, TimeSor) %>%\n  filter(TimeSor < 12 ) %>%\n  group_by(ID, Entr, Sor, DOW) %>%\n  summarise(nDOW = n())\n\naprem <- train %>%\n  select(ID, Entr, Sor, Date, DOW, TimeSor) %>%\n  filter(TimeSor >= 12 ) %>%\n  group_by(ID, Entr, Sor, DOW) %>%\n  summarise(nDOW = n())\n\nT.matin <- train %>%\n  select(ID, Entr, Sor, Date, DOW, TimeSor) %>%\n  filter(TimeSor < 12 ) %>%\n  group_by(ID, Entr, Sor, DOW) %>%\n  summarise(SD = sd(TimeSor), T = mean(TimeSor),Tmin = T -SD, Tmax = T + SD)\n\nT.aprem <- train %>%\n  select(ID, Entr, Sor, Date, DOW, TimeSor) %>%\n  filter(TimeSor >= 12 ) %>%\n  group_by(ID, Entr, Sor, DOW) %>%\n  summarise(SD = sd(TimeSor), T = mean(TimeSor),Tmin = T -SD, Tmax = T + SD)\n\nT.matin <- inner_join(T.matin, matin)\nT.aprem <- inner_join(T.aprem, aprem)\nT <- rbind(T.matin, T.aprem)\n\n##########\n##########\n# get model.02 result\ntest_decompose$result <- 0\nfor (i in 1:nrow(result)){\n  test_decompose[\n    test_decompose$ID   == result$ID[i] &\n    test_decompose$Entr == result$Entr[i]&\n    test_decompose$Sor  == result$Sor[i]&\n    test_decompose$DOW  == result$DOW[i]&\n    test_decompose$TimeSor >= result$Tmin[i]&\n    test_decompose$TimeSor <= result$Tmax[i],\n    \"result\"]<-1\n}\n\n  \n##########\n# get Ind1, Ind2\ntest.result.model0 <- test0 %>%\n  group_by(ID) %>%\n  summarise(Tpos = sum(result[result == 1]), Fneg = n() - Tpos, Ind1 = Tpos/(Tpos+Fneg), Ind2 = Fneg/(Tpos+Fneg) )\n\t\n# ##########\n# # get Ind3\n#\n# test.period <- data.frame(Date = seq(as.Date(\"2015-5-1\"), as.Date(\"2015-5-28\"), \"day\"))\n# test.period$DOW <- as.POSIXlt(test.period$Date)$wday\n#\n# temp <- result.model1\n# temp$DOW <- as.numeric(temp$DOW)\n# temp <- inner_join(test.period, temp, by=\"DOW\")\n# temp$Mark <- 0\n#\n# # temp$DOW <- as.character(temp$DOW)\n# for(i in 1:nrow(test_decompose)){\n#   temp[\n#     temp$ID   == test_decompose$ID[i] &\n#     temp$Entr == test_decompose$Entr[i] &\n#     temp$Sor  == test_decompose$Sor[i] &\n#     temp$Date  == test_decompose$Date[i] &\n#     temp$Tmin <= test_decompose$TimeSor[i]&\n#     temp$Tmax >= test_decompose$TimeSor[i],\n#     \"Mark\"]<-1\n# }\n# count(temp,Mark)\n# m1<-temp\n#\n# for(i in 1:nrow(temp)){\n#   for(j in 1:nrow(test_decompose)){\n#     if(temp$ID[i]   == test_decompose$ID[j] &\n#        temp$Entr[i] == test_decompose$Entr[j] &\n#        temp$Sor[i]  == test_decompose$Sor[j] &\n#        temp$Date[i] == test_decompose$Date[j] &\n#        temp$Tmax[i] >= test_decompose$TimeSor[j] &\n#        temp$Tmin[i] <= test_decompose$TimeSor[j]) {\n#       temp$Mark[i] <- temp$Mark[i] + 1\n#       break # end for loop\n#     } # next trx in real\n#   } # next trx predicted\n# }\n# m2<-temp\n#\n# temp.ind <- temp %>%\n#   filter(Mark == 0)\n# group_by(ID) %>%\n#   summarize(Fpos = n())\n\n# get Ind3\ntemp <- result.model0\ntemp$DOW <- as.numeric(temp$DOW)\ntemp <- inner_join(test.period, temp, by=\"DOW\")\ntemp$Mark <- 0\n\n# temp$DOW <- as.character(temp$DOW)\nfor(i in 1:nrow(test0)){\n  temp[\n    temp$ID   == test0$ID[i] &\n      temp$Entr == test0$Entr[i] &\n      temp$Sor  == test0$Sor[i] &\n      temp$Date  == test0$Date[i] &\n      temp$Tmin <= test0$TimeSor[i]&\n      temp$Tmax >= test0$TimeSor[i],\n    \"Mark\"]<-1\n}\n\nInd3 <- temp %>% group_by(ID) %>% summarise(nMark = sum(Mark[Mark==1]), t = (n() - nMark), Ind3 = t/ n() )\n\n# get the final indicator\ntest.result.model0$Ind <- test.result.model0$Ind1 - test.result.model0$Ind2 / 15\ntest.result.model0 <- test.result.model0[, c(1, ncol(test.result.model0))]\ntest.result.model0$Model <- 02\t\n   \n\n##########\n##########\n# model.12: Time-Space - consider DOW\n# get indicators\ntest_result <- test_decompose %>%\n  group_by(ID) %>%\n  summarise(Tpos = sum(result[result == 1]), Fneg = n() - Tpos, Ind1 = Tpos/(Tpos+Fneg), Ind2 = Fneg/(Tpos+Fneg) )\n\n# get the final indicator\ntest_result$Ind <- test_result$Ind1 - test_result$Ind2 / 15\ntest.result.model1 <- test_result[, c(1, ncol(test_result))]\ntest.result.model1$Model <- 1\n\n##########\n##########\n# final step\nInd <- rbind(test.result.model0, test.result.model1)\n\n\n\n\n##########\n##########\n\nDecompose <- function(transaction){\n\t# break OD to troncon (A7, A8, A9)\n\t# treat the Systeme Ouvert\n\t#\n\t# Args: \n\t#\ttransaction:\tID, Entr, Sor, ...\n\t#\n\t# Returns:\n\t#\tOD in A7,A8,A9: OD --> troncons\n\t#\tOD other: does not change\n  gares$Autoroute <- as.character(gares$Autoroute)\n  transaction$Entr <- as.numeric(as.character(transaction$Entr))\n  transaction$Sor <- as.numeric(as.character(transaction$Sor))\n  Autoroute <- vector(mode = \"character\", length = nrow(transaction))\n  transaction_decompose <- cbind(transaction, Autoroute)\n  transaction_decompose$Autoroute <- as.character(transaction_decompose$Autoroute)\n  transaction_restant <- transaction\n  Pointeur <- 1\n  Pointeur_restant <- 1\n  Gare_inconnue <- 0 #Gares du système ouvert que le code ne connait pas\n  for (i in 1 : nrow(transaction)){\n    if (  ( (transaction$Entr[i] %in% Troncons_A789[,4]) | (transaction$Entr[i] %in% Troncons_A789[,6])  ) & \n          ( (transaction$Sor[i] %in% Troncons_A789[,4]) | (transaction$Sor[i] %in% Troncons_A789[,6])  )  ) { \n      # SI TRAJET DANS LES TROIS AUTOROUTES\n      if (gares$Autoroute[match(transaction$Entr[i],gares$Cde)] !=  gares$Autoroute[match(transaction$Sor[i],gares$Cde)] ) { \n        #E=A7etS=A9 ou l'inverse\n        if (transaction$Entr[i] != 25004210 & transaction$Sor[i] != 25004210){  \n          # Entrée et sortie <> Orange Centre\n          if(gares$Autoroute[match(transaction$Entr[i],gares$Cde)] == \"A7\"){\n            # E=A7 S=A9\n            newrow1 <- c(transaction[i,1],transaction$Entr[i],25004210,transaction[i, c(4:ncol(transaction))],\"A7\")\n            newrow2 <- c(transaction[i,1],25004210,transaction$Sor[i], transaction[i, c(4:ncol(transaction))],\"A9\")\n            transaction_decompose = rbind(transaction_decompose[1:Pointeur,],newrow1,newrow2,transaction_decompose[-(1:Pointeur),])\n            Pointeur <- Pointeur +2\n          }\n          else if(gares$Autoroute[match(transaction$Entr[i],gares$Cde)] == \"A9\"){\n            # E=A9 S=A7\n            newrow1 <- c(transaction[i,1],transaction$Entr[i],25004210,transaction[i, c(4:ncol(transaction))],\"A9\")\n            newrow2 <- c(transaction[i,1],25004210,transaction$Sor[i], transaction[i, c(4:ncol(transaction))],\"A7\")\n            transaction_decompose = rbind(transaction_decompose[1:Pointeur,],newrow1,newrow2,transaction_decompose[-(1:Pointeur),])\n            Pointeur <- Pointeur +2\n          }\n        }\n        else { # E=A9 S=OC ou l'inverse\n          transaction_decompose$Autoroute[Pointeur] <- \"A9\"\n        }\n      }\n      else {\n        transaction_decompose$Autoroute[Pointeur] <- gares$Autoroute[match(transaction$Entr[i],gares$Cde)]\n      }\n      if (Pointeur_restant == 1){\n        transaction_restant <- transaction_restant[2:nrow(transaction_restant),]\n      }\n      else {\n        transaction_restant <- rbind(transaction_restant[(1:(Pointeur_restant-1)),],transaction_restant[-(1:(Pointeur_restant)),])\n        Pointeur_restant <- Pointeur_restant - 1\n      }\n    }\n    \n    ## ??? deactivate: no information about Voie\n    else if (transaction$Entr[i] < 0 & ( (transaction$Sor[i] %in% Troncons_A789[,4])|(transaction$Sor[i] %in% Troncons_A789[,6]) ) ){ \n      #Si Entr = 0 et Sor dans A789\n      if (transaction$Sor[i] == 25006001){ #Canet de mereuil\n        if (transaction$Voie[i] >= 20 ){#Sortie\n          transaction_decompose[Pointeur,] <- c(transaction$ID[i],25004278 ,25006001,transaction[i, c(4:ncol(transaction))],\"A8\")\n        } #On crée un trajet Coudoux -> Canet de méreuil\n        else { \n          transaction_decompose[Pointeur,] <- c(transaction$ID[i], 25006001 ,25004278,transaction[i, c(4:ncol(transaction))],\"A8\")\n        }  #Trajet Canet -> Coudoux\n      }\n      else if (transaction$Sor[i] == 25006010){ #Fréjus\n        if (transaction$Voie[i] >= 20 ){#Sortie\n          transaction_decompose[Pointeur,] <- c(transaction$ID[i],25006022 ,25006010,transaction[i, c(4:ncol(transaction))],\"A8\")\n        } #On crée un trajet Antibes PV Nord-> Fréjus\n        else { \n          transaction_decompose[Pointeur,] <- c(transaction$ID[i], 25006010 ,25006012,transaction[i, c(4:ncol(transaction))],\"A8\")\n        }  #Trajet Fréjus -> Antibes PV \n      }\n      else if (transaction$Sor[i] == 25006011){ #Les Adrets\n        if (transaction$Voie[i] >= 20 ){#Sortie\n          transaction_decompose[Pointeur,] <- c(transaction$ID[i],25006022 ,25006011,transaction[i, c(4:ncol(transaction))],\"A8\")\n        } #On crée un trajet Antibes PV Nord-> Les Adrets\n        else { \n          transaction_decompose[Pointeur,] <- c(transaction$ID[i], 25006011 ,25006012,transaction[i, c(4:ncol(transaction))],\"A8\")\n        }  #Trajet Les Adrets -> Antibes PV \n      }\n      else if (transaction$Sor[i] == 25006014){ #Antibes Ouest\n        if (transaction$Voie[i] >= 20 ){#Sortie\n          transaction_decompose[Pointeur,] <- c(transaction$ID[i],25006009 ,25006014,transaction[i, c(4:ncol(transaction))],\"A8\")\n        } #On crée un trajet Capitou -> Antibes Ouest\n        else { \n          transaction_decompose[Pointeur,] <- c(transaction$ID[i], 25006014 ,25006009,transaction[i, c(4:ncol(transaction))],\"A8\")\n        }  #Trajet Antibes Ouest -> Capitou \n      }\n      else if (transaction$Sor[i] == 25006012){ #Antibes PV\n        if (transaction$Voie[i] >= 20 ){#PV Sud, donc de Cannes vers Nice\n          transaction_decompose[Pointeur,] <- c(transaction$ID[i],25006009 ,25006015,transaction[i, c(4:ncol(transaction))],\"A8\")\n        } #On crée un trajet Capitou -> Cagnes Ouest Nord\n        else { #PV Nord, de Nice vers Cannes\n          transaction_decompose[Pointeur,] <- c(transaction$ID[i], 25006015 ,25006009,transaction[i, c(4:ncol(transaction))],\"A8\")\n        }  #Trajet Cagnes Ouest Nord -> Capitou \n      }\n      else if (transaction$Sor[i] == 25006024){ #Sophia\n        transaction_decompose[Pointeur,] <- c(transaction$ID[i],25006024 ,25006020,transaction[i, c(4:ncol(transaction))],\"A8\")\n        #Entrée seule, don trajet Sophia -> Saint Isidore\n      }\n      else if (transaction$Sor[i] == 25006013){ #Antibes Est\n        if (transaction$Voie[i] >= 20 ){#Sortie\n          transaction_decompose[Pointeur,] <- c(transaction$ID[i],25006020 ,25006013,transaction[i, c(4:ncol(transaction))],\"A8\")\n        } #On crée un trajet Saint Isidore -> Antibes Est\n        else { \n          transaction_decompose[Pointeur,] <- c(transaction$ID[i], 25006013 ,25006020,transaction[i, c(4:ncol(transaction))],\"A8\")\n        }  #Trajet Antibes Est -> Saint Isidore\n      }\n      else if (transaction$Sor[i] == 25006017){ #Cagnes Ouest Sud\n        transaction_decompose[Pointeur,] <- c(transaction$ID[i],25006017 ,25006020,transaction[i, c(4:ncol(transaction))],\"A8\")\n        #On crée un trajet  Cagnes Ouest Sud -> Saint Isidore\n      }\n      else if (transaction$Sor[i] == 25006015){ #Cagnes Ouest Nord\n        transaction_decompose[Pointeur,] <- c(transaction$ID[i],25006020 ,25006015,transaction[i, c(4:ncol(transaction))],\"A8\")\n        #On crée un trajet  Saint Isidore -> Cagnes Ouest Nord\n      }\n      else if (transaction$Sor[i] == 25006016){ #Cagnes Est\n        if (transaction$Voie[i] >= 20 ){#Sortie\n          transaction_decompose[Pointeur,] <- c(transaction$ID[i],25006020 ,25006016,transaction[i, c(4:ncol(transaction))],\"A8\")\n        } #On crée un trajet Saint Isidore -> Cagnes Est\n        else { \n          transaction_decompose[Pointeur,] <- c(transaction$ID[i], 25006016 ,25006020,transaction[i, c(4:ncol(transaction))],\"A8\")\n        }  #TrajetCagnes Est -> Saint Isidore\n      }\n      else if (transaction$Sor[i] == 25006021){ #Saint Isidore Ech Est\n        if (transaction$Voie[i] >= 20 ){#Sortie\n          transaction_decompose[Pointeur,] <- c(transaction$ID[i],25006027 ,25006021,transaction[i, c(4:ncol(transaction))],\"A8\")\n        } #On crée un trajet La Turbie -> Saint Isidore Ech Est\n        else { \n          transaction_decompose[Pointeur,] <- c(transaction$ID[i], 25006021 ,25006027,transaction[i, c(4:ncol(transaction))],\"A8\")\n        }  #Trajet Saint Isidore Ech Est -> La Turbie\n      }\n      else if (transaction$Sor[i] == 25006021){ #Saint Isidore Ech Est\n        if (transaction$Voie[i] >= 20 ){#Sortie\n          transaction_decompose[Pointeur,] <- c(transaction$ID[i],25006027 ,25006021,transaction[i, c(4:ncol(transaction))],\"A8\")\n        } #On crée un trajet La Turbie -> Saint Isidore Ech Est\n        else { \n          transaction_decompose[Pointeur,] <- c(transaction$ID[i], 25006021 ,25006027,transaction[i, c(4:ncol(transaction))],\"A8\")\n        }  #Trajet Saint Isidore Ech Est -> La Turbie\n      }\n      else if (transaction$Sor[i] == 25006019){ #Saint Isidore Ech Ouest\n        if (transaction$Voie[i] >= 20 ){#Sortie\n          transaction_decompose[Pointeur,] <- c(transaction$ID[i],25006012 ,25006019,transaction[i, c(4:ncol(transaction))],\"A8\")\n        } #On crée un trajet Antibes PV -> Saint Isidore Ech Ouest\n        else { \n          transaction_decompose[Pointeur,] <- c(transaction$ID[i], 25006019 ,25006012,transaction[i, c(4:ncol(transaction))],\"A8\")\n        }  #Trajet Saint Isidore Ech Ouest -> Antibes PV\n      }\n      else if (transaction$Sor[i] == 25006020){ #Saint Isidore PV\n        if (transaction$Voie[i] >= 20 ){#Nord, donc de l'Italie vers Cannes\n          transaction_decompose[Pointeur,] <- c(transaction$ID[i],25006026 ,25006020,transaction[i, c(4:ncol(transaction))],\"A8\")\n        } #On crée un trajet La Turbie Ech -> Cagnes Ouest Nord\n        else { #Sud, de Cannes vers l'Italie\n          transaction_decompose[Pointeur,] <- c(transaction$ID[i], 25006020 ,25006026,transaction[i, c(4:ncol(transaction))],\"A8\")\n        }  #Trajet Cagnes Ouest Nord -> La Turbie Ech\n      }\n      else if (transaction$Sor[i] == 25006026){ #La Turbie Ech\n        if (transaction$Voie[i] >= 20 ){#Sortie\n          transaction_decompose[Pointeur,] <- c(transaction$ID[i],25006020 ,25006026,transaction[i, c(4:ncol(transaction))],\"A8\")\n        } #On crée un trajet Saint isidore PV -> La Turbie Ech\n        else { \n          transaction_decompose[Pointeur,] <- c(transaction$ID[i], 25006026 ,25006020,transaction[i, c(4:ncol(transaction))],\"A8\")\n        }  #Trajet La Turbie Ech -> Saint isidore PV\n      }\n      else if (transaction$Sor[i] == 25006027){ #La Turbie PV\n        if (transaction$Voie[i] >= 20 ){# Nord, donc de l'Italie vers Cannes\n          transaction_decompose[Pointeur,] <- c(transaction$ID[i],25006027 ,25006026,transaction[i, c(4:ncol(transaction))],\"A8\")\n        } #On crée un trajet La Turbie PV -> La Turbie Ech\n        else { #Sud, de Cannes vers l'Italie\n          transaction_decompose[Pointeur,] <- c(transaction$ID[i], 25006026 ,25006027,transaction[i, c(4:ncol(transaction))],\"A8\")\n        }  #Trajet La Turbie Ech -> La Turbie PV\n      }\n      else { Gare_inconnue <- Gare_inconnue +1\n      }\n    }\n    Pointeur <- Pointeur +1\n    Pointeur_restant <- Pointeur_restant +1\n  }\n  \n  transaction_decompose <- transaction_decompose[transaction_decompose$Autoroute > 0,]\n  \n  \n  #DECOMPOSER LES OD PAR TRONCONS :\n  transaction_par_troncons <- data.frame(ID = \"\", ID_Troncon= 0, Autoroute= \"\", Entr= 0, Sor=0,Date = 0, DOW=0, WOY=0, TimeEntr = 0, TimeSor =0, Sens = 0)\n  transaction_par_troncons$Autoroute <- as.character(transaction_par_troncons$Autoroute)\n  # ??? transaction_decompose$Year <- as.character(transaction_decompose$Year)\n  transaction_par_troncons$ID <- as.character(transaction_par_troncons$ID)\n  \n  for (i in 1:nrow(transaction_decompose)){\n    if ( transaction_decompose$Autoroute[i] == \"A7\"){\n      entree <- match(transaction_decompose$Entr[i],A7_par_pk$Cde)\n      sortie <- match(transaction_decompose$Sor[i],A7_par_pk$Cde)\n      if ( entree < sortie ) { # SENS 1\n        for ( j in entree : (sortie-1) ){\n          transaction_par_troncons <- rbind(transaction_par_troncons,c(transaction_decompose$ID[i],Troncons_A7$ID_Troncon[j],\"A7\",A7_par_pk$Cde[j],A7_par_pk$Cde[j+1],transaction_decompose$Date[i],transaction_decompose$DOW[i],transaction_decompose$WOY[i],transaction_decompose$TimeEntr[i],transaction_decompose$TimeSor[i],1))\n        }\n      }\n      else{ #SENS 2\n        for ( j in entree : (sortie+1) ){\n          transaction_par_troncons <- rbind(transaction_par_troncons,c(transaction_decompose$ID[i],Troncons_A7$ID_Troncon[j-1],\"A7\",A7_par_pk$Cde[j],A7_par_pk$Cde[j-1],transaction_decompose$Date[i],transaction_decompose$DOW[i],transaction_decompose$WOY[i],transaction_decompose$TimeEntr[i],transaction_decompose$TimeSor[i],2))\n        }\n      }\n    }\n    else if ( transaction_decompose$Autoroute[i] == \"A8\"){\n      entree <- match(transaction_decompose$Entr[i],A8_par_pk$Cde)\n      sortie <- match(transaction_decompose$Sor[i],A8_par_pk$Cde)\n      if ( entree < sortie ) { # SENS 1\n        for ( j in entree : (sortie-1) ){\n          transaction_par_troncons <- rbind(transaction_par_troncons,\n                                            c(transaction_decompose$ID[i],Troncons_A8$ID_Troncon[j],\"A8\",\n                                              A8_par_pk$Cde[j],A8_par_pk$Cde[j+1],transaction_decompose$Date[i],transaction_decompose$DOW[i],transaction_decompose$WOY[i],transaction_decompose$TimeEntr[i],transaction_decompose$TimeSor[i],1))\n        }\n      }\n      else{ #SENS 2\n        for ( j in entree : (sortie+1) ){\n          transaction_par_troncons <- rbind(transaction_par_troncons,c(transaction_decompose$ID[i],Troncons_A8$ID_Troncon[j-1],\"A8\",A8_par_pk$Cde[j],A8_par_pk$Cde[j-1],transaction_decompose$Date[i],transaction_decompose$DOW[i],transaction_decompose$WOY[i],transaction_decompose$TimeEntr[i],transaction_decompose$TimeSor[i],2))\n        }\n      }\n    }\n    else if ( transaction_decompose$Autoroute[i] == \"A9\"){\n      entree <- match(transaction_decompose$Entr[i],A9_par_pk$Cde)\n      sortie <- match(transaction_decompose$Sor[i],A9_par_pk$Cde)\n      if ( entree < sortie ) { # SENS 1\n        for ( j in entree : (sortie-1) ){\n          transaction_par_troncons <- rbind(transaction_par_troncons,c(transaction_decompose$ID[i],Troncons_A9$ID_Troncon[j],\"A9\",A9_par_pk$Cde[j],A9_par_pk$Cde[j+1],transaction_decompose$Date[i],transaction_decompose$DOW[i],transaction_decompose$WOY[i],transaction_decompose$TimeEntr[i],transaction_decompose$TimeSor[i],1))\n        }\n      }\n      else{ #SENS 2\n        for ( j in entree : (sortie+1) ){\n          transaction_par_troncons <- rbind(transaction_par_troncons,c(transaction_decompose$ID[i],Troncons_A9$ID_Troncon[j-1],\"A9\",A9_par_pk$Cde[j],A9_par_pk$Cde[j-1],transaction_decompose$Date[i],transaction_decompose$DOW[i],transaction_decompose$WOY[i],transaction_decompose$TimeEntr[i],transaction_decompose$TimeSor[i],2))\n        }\n      }\n    }\n  }\n  transaction_par_troncons <- transaction_par_troncons[-1,]\n\t\n\n### test\n\t#Rajouter demi trajet LANCON LA BARQUE\n\tPointeur <- 1\n\tfor (i in 1:nrow(transaction_par_troncons)){\n\t  if (!is.na(transaction_par_troncons$Sor[Pointeur]) &\n\t\ttransaction_par_troncons$Sor[Pointeur] == 25004220 ){ # (A7 -> Lancon)\n\t    newrow1 <- c(transaction_par_troncons$ID[Pointeur],25004220,25004278,transaction_decompose$Date[Pointeur],transaction_decompose$DOW[Pointeur],transaction_decompose$WOY[Pointeur],transaction_decompose$TimeEntr[Pointeur],transaction_decompose$TimeSor[Pointeur])\n\t    newrow2 <- c(transaction_par_troncons$ID[Pointeur],25004278,25004279,transaction_decompose$Date[Pointeur],transaction_decompose$DOW[Pointeur],transaction_decompose$WOY[Pointeur],transaction_decompose$TimeEntr[Pointeur],transaction_decompose$TimeSor[Pointeur])\n\t    transaction_par_troncons <- rbind(transaction_par_troncons[(1:Pointeur),],newrow1,newrow2,transaction_par_troncons[-(1:Pointeur),])\n\t    Pointeur <- Pointeur + 2\n\t  } \n\t  if (!is.na(transaction_par_troncons$Entr[Pointeur]) &\n\t\ttransaction_par_troncons$Entr[Pointeur] == 25004220){ # (Lancon -> A7)\n\t    newrow1 <- c(transaction_par_troncons$ID[Pointeur],25004220,25004278,transaction_decompose$Date[Pointeur],transaction_decompose$DOW[Pointeur],transaction_decompose$WOY[Pointeur],transaction_decompose$TimeEntr[Pointeur],transaction_decompose$TimeSor[Pointeur])\n\t    newrow2 <- c(transaction_par_troncons$ID[Pointeur],25004278,25004279,transaction_decompose$Date[Pointeur],transaction_decompose$DOW[Pointeur],transaction_decompose$WOY[Pointeur],transaction_decompose$TimeEntr[Pointeur],transaction_decompose$TimeSor[Pointeur])\n\t    transaction_par_troncons <- rbind(transaction_par_troncons[(1:Pointeur),],newrow1,newrow2,transaction_par_troncons[-(1:Pointeur),])\n\t    Pointeur <- Pointeur + 2\n\t  }\n\t  if (!is.na(transaction_par_troncons$Entr[Pointeur]) &\n\t\ttransaction_par_troncons$Entr[Pointeur] == 25006002){ # (La Barque -> A8)\n\t    newrow1 <- c(transaction_par_troncons$ID[Pointeur],25004279,25006001,transaction_decompose$Date[Pointeur],transaction_decompose$DOW[Pointeur],transaction_decompose$WOY[Pointeur],transaction_decompose$TimeEntr[Pointeur],transaction_decompose$TimeSor[Pointeur])\n\t    newrow2 <- c(transaction_par_troncons$ID[Pointeur],25006001,25006080,transaction_decompose$Date[Pointeur],transaction_decompose$DOW[Pointeur],transaction_decompose$WOY[Pointeur],transaction_decompose$TimeEntr[Pointeur],transaction_decompose$TimeSor[Pointeur])\n\t    newrow3 <- c(transaction_par_troncons$ID[Pointeur],25006080,25006002,transaction_decompose$Date[Pointeur],transaction_decompose$DOW[Pointeur],transaction_decompose$WOY[Pointeur],transaction_decompose$TimeEntr[Pointeur],transaction_decompose$TimeSor[Pointeur])\n\t    transaction_par_troncons <- rbind(transaction_par_troncons[(1:Pointeur),],newrow1,newrow2,newrow3,transaction_par_troncons[-(1:Pointeur),])\n\t    Pointeur <- Pointeur + 3\n\t  }\n\t  if (!is.na(transaction_par_troncons$Sor[Pointeur]) &\n\t\ttransaction_par_troncons$Sor[Pointeur] == 25006002){ # (A8 -> La Barque)\n\t    newrow1 <- c(transaction_par_troncons$ID[Pointeur],25004279,25006001,transaction_decompose$Date[Pointeur],transaction_decompose$DOW[Pointeur],transaction_decompose$WOY[Pointeur],transaction_decompose$TimeEntr[Pointeur],transaction_decompose$TimeSor[Pointeur])\n\t    newrow2 <- c(transaction_par_troncons$ID[Pointeur],25006001,25006080,transaction_decompose$Date[Pointeur],transaction_decompose$DOW[Pointeur],transaction_decompose$WOY[Pointeur],transaction_decompose$TimeEntr[Pointeur],transaction_decompose$TimeSor[Pointeur])\n\t    newrow3 <- c(transaction_par_troncons$ID[Pointeur],25006080,25006002,transaction_decompose$Date[Pointeur],transaction_decompose$DOW[Pointeur],transaction_decompose$WOY[Pointeur],transaction_decompose$TimeEntr[Pointeur],transaction_decompose$TimeSor[Pointeur])\n\t    transaction_par_troncons <- rbind(transaction_par_troncons[(1:Pointeur),],newrow1,newrow2,newrow3,transaction_par_troncons[-(1:Pointeur),])\n\t    Pointeur <- Pointeur + 3\n\t  }\n\t  Pointeur <- Pointeur + 1\n\t}\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n  transaction_par_troncons$Date <- as.Date(as.numeric(transaction_par_troncons$Date), origin = as.Date(\"1970-1-1\"))\n  transaction_par_troncons$TimeEntr <- as.numeric(transaction_par_troncons$TimeEntr)\n  transaction_par_troncons$TimeSor <- as.numeric(transaction_par_troncons$TimeSor)\n  transaction_par_troncons <- transaction_par_troncons[, c(1,4:(ncol(transaction_par_troncons)-1))]\n  \n  trx <- rbind(transaction_par_troncons, transaction_restant)\n  trx$DOW <- as.numeric(trx$DOW)\n  trx$WOY <- as.numeric(trx$WOY)\n  trx <- tbl_df(trx)\n  return(trx)\n}\n",
    "created" : 1438246369915.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3714690190",
    "id" : "6A57F993",
    "lastKnownWriteTime" : 1438334432,
    "path" : "~/Downloads/Vinci R/VA1/SA_otherActions.R",
    "project_path" : "SA_otherActions.R",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "type" : "r_source"
}